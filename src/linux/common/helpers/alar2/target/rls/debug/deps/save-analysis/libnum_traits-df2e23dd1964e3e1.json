{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14","program":"/home/mla/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","num_traits","/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=df2e23dd1964e3e1","-C","extra-filename=-df2e23dd1964e3e1","--out-dir","/mnt/c/Users/malachma/OneDrive/malachma-privat/OneDrive/malachma/workspace/github.com/Azure/repair-script-library/src/linux/common/helpers/alar2/target/rls/debug/deps","-L","dependency=/mnt/c/Users/malachma/OneDrive/malachma-privat/OneDrive/malachma/workspace/github.com/Azure/repair-script-library/src/linux/common/helpers/alar2/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--cfg","has_to_int_unchecked","--error-format=json","--sysroot","/home/mla/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/mnt/c/Users/malachma/OneDrive/malachma-privat/OneDrive/malachma/workspace/github.com/Azure/repair-script-library/src/linux/common/helpers/alar2/target/rls/debug/deps/libnum_traits-df2e23dd1964e3e1.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[10285195072970654542,14886035359600786263]},"crate_root":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src","external_crates":[{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[4150165762619742282,10084428854705346699]}},{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17154149902455954331,10787439630250540476]}},{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3551889228217061522,18098948565341830907]}}],"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":472,"byte_end":19986,"line_start":11,"line_end":583,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1882},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":181},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":173},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":122},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":316},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":323},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":333},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":336},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1523,"byte_end":1526,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":354},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1551,"byte_end":1557,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":359},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1559,"byte_end":1571,"line_start":44,"line_end":44,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":397},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1600,"byte_end":1610,"line_start":45,"line_end":45,"column_start":27,"column_end":37},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1612,"byte_end":1625,"line_start":45,"line_end":45,"column_start":39,"column_end":52},"alias_span":null,"name":"SaturatingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":406},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1627,"byte_end":1640,"line_start":45,"line_end":45,"column_start":54,"column_end":67},"alias_span":null,"name":"SaturatingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1642,"byte_end":1655,"line_start":45,"line_end":45,"column_start":69,"column_end":82},"alias_span":null,"name":"SaturatingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1687,"byte_end":1698,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":422},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1700,"byte_end":1711,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":425},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1713,"byte_end":1724,"line_start":47,"line_end":47,"column_start":31,"column_end":42},"alias_span":null,"name":"WrappingNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1726,"byte_end":1737,"line_start":47,"line_end":47,"column_start":44,"column_end":55},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1739,"byte_end":1750,"line_start":47,"line_end":47,"column_start":57,"column_end":68},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1752,"byte_end":1763,"line_start":47,"line_end":47,"column_start":70,"column_end":81},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1782,"byte_end":1793,"line_start":49,"line_end":49,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":461},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1795,"byte_end":1798,"line_start":49,"line_end":49,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":456},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1800,"byte_end":1803,"line_start":49,"line_end":49,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1821,"byte_end":1824,"line_start":50,"line_end":50,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":488},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1826,"byte_end":1833,"line_start":50,"line_end":50,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":490},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1835,"byte_end":1841,"line_start":50,"line_end":50,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":471},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1843,"byte_end":1849,"line_start":50,"line_end":50,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1851,"byte_end":1859,"line_start":50,"line_end":50,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":472,"byte_end":19986,"line_start":11,"line_end":583,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":4073},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":101},{"krate":0,"index":185},{"krate":0,"index":246},{"krate":0,"index":274},{"krate":0,"index":306},{"krate":0,"index":450},{"krate":0,"index":466},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":4012},{"krate":0,"index":4015},{"krate":0,"index":4018},{"krate":0,"index":4021},{"krate":0,"index":4024},{"krate":0,"index":4027},{"krate":0,"index":4030},{"krate":0,"index":4033},{"krate":0,"index":4036},{"krate":0,"index":4039},{"krate":0,"index":4042},{"krate":0,"index":4045},{"krate":0,"index":532},{"krate":0,"index":4048},{"krate":0,"index":4053},{"krate":0,"index":4055},{"krate":0,"index":4057},{"krate":0,"index":536},{"krate":0,"index":4059},{"krate":0,"index":4065},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"/ Numeric traits for generic mathematics","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Compatibility","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":519,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `num-traits` crate is tested for rustc 1.8 and greater.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":544,"byte_end":607,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":4177},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":94},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":607},{"krate":0,"index":629},{"krate":0,"index":650},{"krate":0,"index":670},{"krate":0,"index":689},{"krate":0,"index":707},{"krate":0,"index":724},{"krate":0,"index":740},{"krate":0,"index":755},{"krate":0,"index":769},{"krate":0,"index":782},{"krate":0,"index":794},{"krate":0,"index":805},{"krate":0,"index":815},{"krate":0,"index":824},{"krate":0,"index":832},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":850},{"krate":0,"index":854},{"krate":0,"index":857}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21467,"byte_end":21474,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper and lower bounds","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21411,"byte_end":21456,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21610,"byte_end":21619,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the smallest finite number this type can represent","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21540,"byte_end":21602,"line_start":11,"line_end":11,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21704,"byte_end":21713,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the largest finite number this type can represent","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":21635,"byte_end":21696,"line_start":13,"line_end":13,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":4209},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":860},{"krate":0,"index":875},{"krate":0,"index":890},{"krate":0,"index":905},{"krate":0,"index":920},{"krate":0,"index":935},{"krate":0,"index":950},{"krate":0,"index":965},{"krate":0,"index":980},{"krate":0,"index":995},{"krate":0,"index":1010},{"krate":0,"index":1025},{"krate":0,"index":1040},{"krate":0,"index":1091},{"krate":0,"index":148},{"krate":0,"index":1142},{"krate":0,"index":1157},{"krate":0,"index":1172},{"krate":0,"index":1187},{"krate":0,"index":1202},{"krate":0,"index":1217},{"krate":0,"index":1232},{"krate":0,"index":1247},{"krate":0,"index":1262},{"krate":0,"index":1277},{"krate":0,"index":1292},{"krate":0,"index":1307},{"krate":0,"index":1322},{"krate":0,"index":1337},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25293,"byte_end":25304,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" A generic trait for converting a value to a number.","sig":null,"attributes":[{"value":"/ A generic trait for converting a value to a number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24719,"byte_end":24774,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24775,"byte_end":24778,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24779,"byte_end":24848,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24849,"byte_end":24903,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24904,"byte_end":24976,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":24977,"byte_end":25047,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25048,"byte_end":25076,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25077,"byte_end":25154,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25155,"byte_end":25229,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25230,"byte_end":25282,"line_start":18,"line_end":18,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25463,"byte_end":25471,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"pub fn to_isize(&Self) -> Option<isize>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `isize`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25311,"byte_end":25381,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ represented by an `isize`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25386,"byte_end":25441,"line_start":21,"line_end":21,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25446,"byte_end":25455,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25718,"byte_end":25723,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"pub fn to_i8(&Self) -> Option<i8>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i8`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25572,"byte_end":25639,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ represented by an `i8`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25644,"byte_end":25696,"line_start":28,"line_end":28,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25701,"byte_end":25710,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25966,"byte_end":25972,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"pub fn to_i16(&Self) -> Option<i16>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i16`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25818,"byte_end":25886,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/ represented by an `i16`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25891,"byte_end":25944,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":25949,"byte_end":25958,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26217,"byte_end":26223,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"pub fn to_i32(&Self) -> Option<i32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i32`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26069,"byte_end":26137,"line_start":41,"line_end":41,"column_start":5,"column_end":73}},{"value":"/ represented by an `i32`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26142,"byte_end":26195,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26200,"byte_end":26209,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26454,"byte_end":26460,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"pub fn to_i64(&Self) -> Option<i64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i64`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26320,"byte_end":26388,"line_start":48,"line_end":48,"column_start":5,"column_end":73}},{"value":"/ represented by an `i64`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26393,"byte_end":26446,"line_start":49,"line_end":49,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26977,"byte_end":26984,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"pub fn to_i128(&Self) -> Option<i128>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i128`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26489,"byte_end":26558,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ represented by an `i128` (`i64` under the default implementation), then","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26563,"byte_end":26638,"line_start":53,"line_end":53,"column_start":5,"column_end":80}},{"value":"/ `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26643,"byte_end":26666,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26671,"byte_end":26674,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26679,"byte_end":26757,"line_start":56,"line_end":56,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26762,"byte_end":26765,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_i64()`. Types implementing","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26770,"byte_end":26848,"line_start":58,"line_end":58,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26853,"byte_end":26934,"line_start":59,"line_end":59,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26939,"byte_end":26948,"line_start":60,"line_end":60,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":26953,"byte_end":26969,"line_start":61,"line_end":61,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27209,"byte_end":27217,"line_start":69,"line_end":69,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"pub fn to_usize(&Self) -> Option<usize>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `usize`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27059,"byte_end":27128,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ represented by a `usize`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27133,"byte_end":27187,"line_start":67,"line_end":67,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27192,"byte_end":27201,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27462,"byte_end":27467,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"pub fn to_u8(&Self) -> Option<u8>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u8`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27318,"byte_end":27384,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ represented by a `u8`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27389,"byte_end":27440,"line_start":74,"line_end":74,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27445,"byte_end":27454,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27708,"byte_end":27714,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"pub fn to_u16(&Self) -> Option<u16>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u16`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27562,"byte_end":27629,"line_start":80,"line_end":80,"column_start":5,"column_end":72}},{"value":"/ represented by a `u16`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27634,"byte_end":27686,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27691,"byte_end":27700,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27957,"byte_end":27963,"line_start":90,"line_end":90,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"pub fn to_u32(&Self) -> Option<u32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u32`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27811,"byte_end":27878,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ represented by a `u32`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27883,"byte_end":27935,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":27940,"byte_end":27949,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28192,"byte_end":28198,"line_start":96,"line_end":96,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"pub fn to_u64(&Self) -> Option<u64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u64`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28060,"byte_end":28127,"line_start":94,"line_end":94,"column_start":5,"column_end":72}},{"value":"/ represented by a `u64`, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28132,"byte_end":28184,"line_start":95,"line_end":95,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28713,"byte_end":28720,"line_start":108,"line_end":108,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"pub fn to_u128(&Self) -> Option<u128>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u128`. If the value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28227,"byte_end":28295,"line_start":98,"line_end":98,"column_start":5,"column_end":73}},{"value":"/ represented by a `u128` (`u64` under the default implementation), then","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28300,"byte_end":28374,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28379,"byte_end":28402,"line_start":100,"line_end":100,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28407,"byte_end":28410,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28415,"byte_end":28493,"line_start":102,"line_end":102,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28498,"byte_end":28501,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_u64()`. Types implementing","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28506,"byte_end":28584,"line_start":104,"line_end":104,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28589,"byte_end":28670,"line_start":105,"line_end":105,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28675,"byte_end":28684,"line_start":106,"line_end":106,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28689,"byte_end":28705,"line_start":107,"line_end":107,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29008,"byte_end":29014,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"pub fn to_f32(&Self) -> Option<f32>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. Overflows may map to positive\n or negative inifinity, otherwise `None` is returned if the value cannot\n be represented by an `f32`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f32`. Overflows may map to positive","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28795,"byte_end":28870,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ or negative inifinity, otherwise `None` is returned if the value cannot","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28875,"byte_end":28950,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ be represented by an `f32`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28955,"byte_end":28986,"line_start":114,"line_end":114,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":28991,"byte_end":29000,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29554,"byte_end":29560,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"pub fn to_f64(&Self) -> Option<f64>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. Overflows may map to positive\n or negative inifinity, otherwise `None` is returned if the value cannot\n be represented by an `f64`.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f64`. Overflows may map to positive","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29111,"byte_end":29186,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/ or negative inifinity, otherwise `None` is returned if the value cannot","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29191,"byte_end":29266,"line_start":121,"line_end":121,"column_start":5,"column_end":80}},{"value":"/ be represented by an `f64`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29271,"byte_end":29302,"line_start":122,"line_end":122,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29307,"byte_end":29310,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ The default implementation tries to convert through `to_i64()`, and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29315,"byte_end":29386,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ failing that through `to_u64()`. Types implementing this trait should","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29391,"byte_end":29464,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"/ override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29469,"byte_end":29532,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":29537,"byte_end":29546,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38785,"byte_end":38798,"line_start":411,"line_end":411,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" A generic trait for converting a number to a value.","sig":null,"attributes":[{"value":"/ A generic trait for converting a number to a value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38211,"byte_end":38266,"line_start":401,"line_end":401,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38267,"byte_end":38270,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38271,"byte_end":38340,"line_start":403,"line_end":403,"column_start":1,"column_end":70}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38341,"byte_end":38395,"line_start":404,"line_end":404,"column_start":1,"column_end":55}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38396,"byte_end":38468,"line_start":405,"line_end":405,"column_start":1,"column_end":73}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38469,"byte_end":38539,"line_start":406,"line_end":406,"column_start":1,"column_end":71}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38540,"byte_end":38568,"line_start":407,"line_end":407,"column_start":1,"column_end":29}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38569,"byte_end":38646,"line_start":408,"line_end":408,"column_start":1,"column_end":78}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38647,"byte_end":38721,"line_start":409,"line_end":409,"column_start":1,"column_end":75}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38722,"byte_end":38774,"line_start":410,"line_end":410,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38981,"byte_end":38991,"line_start":415,"line_end":415,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"pub fn from_isize(isize) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `isize` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38812,"byte_end":38884,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38889,"byte_end":38959,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38964,"byte_end":38973,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39250,"byte_end":39257,"line_start":422,"line_end":422,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"pub fn from_i8(i8) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i8` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39084,"byte_end":39153,"line_start":419,"line_end":419,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39158,"byte_end":39228,"line_start":420,"line_end":420,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39233,"byte_end":39242,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39508,"byte_end":39516,"line_start":429,"line_end":429,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"pub fn from_i16(i16) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i16` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39341,"byte_end":39411,"line_start":426,"line_end":426,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39416,"byte_end":39486,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39491,"byte_end":39500,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39768,"byte_end":39776,"line_start":436,"line_end":436,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"pub fn from_i32(i32) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i32` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39601,"byte_end":39671,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39676,"byte_end":39746,"line_start":434,"line_end":434,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39751,"byte_end":39760,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40014,"byte_end":40022,"line_start":442,"line_end":442,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"pub fn from_i64(i64) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i64` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39861,"byte_end":39931,"line_start":440,"line_end":440,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":39936,"byte_end":40006,"line_start":441,"line_end":441,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40512,"byte_end":40521,"line_start":453,"line_end":453,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"pub fn from_i128(i128) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `i128` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40053,"byte_end":40124,"line_start":444,"line_end":444,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40129,"byte_end":40199,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40204,"byte_end":40207,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40212,"byte_end":40290,"line_start":447,"line_end":447,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40295,"byte_end":40298,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_i64()`. Types implementing","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40303,"byte_end":40383,"line_start":449,"line_end":449,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40388,"byte_end":40469,"line_start":450,"line_end":450,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40474,"byte_end":40483,"line_start":451,"line_end":451,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40488,"byte_end":40504,"line_start":452,"line_end":452,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40781,"byte_end":40791,"line_start":460,"line_end":460,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"pub fn from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `usize` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40613,"byte_end":40684,"line_start":457,"line_end":457,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40689,"byte_end":40759,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40764,"byte_end":40773,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41050,"byte_end":41057,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"pub fn from_u8(u8) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u8` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40884,"byte_end":40953,"line_start":464,"line_end":464,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":40958,"byte_end":41028,"line_start":465,"line_end":465,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41033,"byte_end":41042,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41308,"byte_end":41316,"line_start":474,"line_end":474,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"pub fn from_u16(u16) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u16` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41141,"byte_end":41211,"line_start":471,"line_end":471,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41216,"byte_end":41286,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41291,"byte_end":41300,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41568,"byte_end":41576,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"pub fn from_u32(u32) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u32` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41401,"byte_end":41471,"line_start":478,"line_end":478,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41476,"byte_end":41546,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41551,"byte_end":41560,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41814,"byte_end":41822,"line_start":487,"line_end":487,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"pub fn from_u64(u64) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u64` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41661,"byte_end":41731,"line_start":485,"line_end":485,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41736,"byte_end":41806,"line_start":486,"line_end":486,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42312,"byte_end":42321,"line_start":498,"line_end":498,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"pub fn from_u128(u128) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `u128` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41853,"byte_end":41924,"line_start":489,"line_end":489,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":41929,"byte_end":41999,"line_start":490,"line_end":490,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42004,"byte_end":42007,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42012,"byte_end":42090,"line_start":492,"line_end":492,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42095,"byte_end":42098,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_u64()`. Types implementing","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42103,"byte_end":42183,"line_start":494,"line_end":494,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42188,"byte_end":42269,"line_start":495,"line_end":495,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42274,"byte_end":42283,"line_start":496,"line_end":496,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42288,"byte_end":42304,"line_start":497,"line_end":497,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42579,"byte_end":42587,"line_start":505,"line_end":505,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"pub fn from_f32(f32) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f32` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42413,"byte_end":42482,"line_start":502,"line_end":502,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42487,"byte_end":42557,"line_start":503,"line_end":503,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42562,"byte_end":42571,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":43072,"byte_end":43080,"line_start":516,"line_end":516,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"pub fn from_f64(f64) -> Option<Self>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts a `f64` to return an optional value of this type. If the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42672,"byte_end":42741,"line_start":509,"line_end":509,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42746,"byte_end":42816,"line_start":510,"line_end":510,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42821,"byte_end":42824,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ The default implementation tries to convert through `from_i64()`, and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42829,"byte_end":42902,"line_start":512,"line_end":512,"column_start":5,"column_end":78}},{"value":"/ failing that through `from_u64()`. Types implementing this trait should","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42907,"byte_end":42982,"line_start":513,"line_end":513,"column_start":5,"column_end":80}},{"value":"/ override this method if they can represent a greater range.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":42987,"byte_end":43050,"line_start":514,"line_end":514,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":43055,"byte_end":43064,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47326,"byte_end":47330,"line_start":686,"line_end":686,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"pub fn cast<T: NumCast, U: NumCast>(T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"/ Cast from one machine scalar to another.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47113,"byte_end":47157,"line_start":675,"line_end":675,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47158,"byte_end":47161,"line_start":676,"line_end":676,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47162,"byte_end":47176,"line_start":677,"line_end":677,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47177,"byte_end":47180,"line_start":678,"line_end":678,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47181,"byte_end":47188,"line_start":679,"line_end":679,"column_start":1,"column_end":8}},{"value":"/ # use num_traits as num;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47189,"byte_end":47217,"line_start":680,"line_end":680,"column_start":1,"column_end":29}},{"value":"/ let twenty: f32 = num::cast(0x14).unwrap();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47218,"byte_end":47265,"line_start":681,"line_end":681,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(twenty, 20f32);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47266,"byte_end":47296,"line_start":682,"line_end":682,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47297,"byte_end":47304,"line_start":683,"line_end":683,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47305,"byte_end":47308,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47309,"byte_end":47318,"line_start":685,"line_end":685,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":173},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47464,"byte_end":47471,"line_start":691,"line_end":691,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":174}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[{"value":"/ An interface for casting between machine scalars.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47400,"byte_end":47453,"line_start":690,"line_end":690,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":48261,"byte_end":48265,"line_start":704,"line_end":704,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"pub fn from<T: ToPrimitive>(T) -> Option<Self>","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Creates a number from another value that can be converted into","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47499,"byte_end":47565,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ a primitive via the `ToPrimitive` trait. If the source value cannot be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47570,"byte_end":47644,"line_start":693,"line_end":693,"column_start":5,"column_end":79}},{"value":"/ represented by the target type, then `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47649,"byte_end":47709,"line_start":694,"line_end":694,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47714,"byte_end":47717,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ A value can be represented by the target type when it lies within","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47722,"byte_end":47791,"line_start":696,"line_end":696,"column_start":5,"column_end":74}},{"value":"/ the range of scalars supported by the target type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47796,"byte_end":47850,"line_start":697,"line_end":697,"column_start":5,"column_end":59}},{"value":"/ For example, a negative integer cannot be represented by an unsigned","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47855,"byte_end":47927,"line_start":698,"line_end":698,"column_start":5,"column_end":77}},{"value":"/ integer type, and an `i64` with a very high magnitude might not be","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47932,"byte_end":48002,"line_start":699,"line_end":699,"column_start":5,"column_end":75}},{"value":"/ convertible to an `i32`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":48007,"byte_end":48035,"line_start":700,"line_end":700,"column_start":5,"column_end":33}},{"value":"/ On the other hand, conversions with possible precision loss or truncation","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":48040,"byte_end":48117,"line_start":701,"line_end":701,"column_start":5,"column_end":82}},{"value":"/ are admitted, like an `f32` with a decimal part to an integer type, or","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":48122,"byte_end":48196,"line_start":702,"line_end":702,"column_start":5,"column_end":79}},{"value":"/ even a large `f64` saturating to `f32` infinity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":48201,"byte_end":48253,"line_start":703,"line_end":703,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":181},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50174,"byte_end":50185,"line_start":770,"line_end":770,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":183}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[{"value":"/ A generic interface for casting between machine scalars with the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49293,"byte_end":49361,"line_start":744,"line_end":744,"column_start":1,"column_end":69}},{"value":"/ `as` operator, which admits narrowing and precision loss.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49362,"byte_end":49423,"line_start":745,"line_end":745,"column_start":1,"column_end":62}},{"value":"/ Implementers of this trait `AsPrimitive` should behave like a primitive","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49424,"byte_end":49499,"line_start":746,"line_end":746,"column_start":1,"column_end":76}},{"value":"/ numeric type (e.g. a newtype around another primitive), and the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49500,"byte_end":49567,"line_start":747,"line_end":747,"column_start":1,"column_end":68}},{"value":"/ intended conversion must never fail.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49568,"byte_end":49608,"line_start":748,"line_end":748,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49609,"byte_end":49612,"line_start":749,"line_end":749,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49613,"byte_end":49627,"line_start":750,"line_end":750,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49628,"byte_end":49631,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49632,"byte_end":49639,"line_start":752,"line_end":752,"column_start":1,"column_end":8}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49640,"byte_end":49674,"line_start":753,"line_end":753,"column_start":1,"column_end":35}},{"value":"/ let three: i32 = (3.14159265f32).as_();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49675,"byte_end":49718,"line_start":754,"line_end":754,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(three, 3);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49719,"byte_end":49744,"line_start":755,"line_end":755,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49745,"byte_end":49752,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49753,"byte_end":49756,"line_start":757,"line_end":757,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49757,"byte_end":49769,"line_start":758,"line_end":758,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49770,"byte_end":49773,"line_start":759,"line_end":759,"column_start":1,"column_end":4}},{"value":"/ **In Rust versions before 1.45.0**, some uses of the `as` operator were not entirely safe.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49774,"byte_end":49868,"line_start":760,"line_end":760,"column_start":1,"column_end":95}},{"value":"/ In particular, it was undefined behavior if","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49869,"byte_end":49916,"line_start":761,"line_end":761,"column_start":1,"column_end":48}},{"value":"/ a truncated floating point value could not fit in the target integer","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49917,"byte_end":49989,"line_start":762,"line_end":762,"column_start":1,"column_end":73}},{"value":"/ type ([#10184](https://github.com/rust-lang/rust/issues/10184)).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49990,"byte_end":50058,"line_start":763,"line_end":763,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50059,"byte_end":50062,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50063,"byte_end":50076,"line_start":765,"line_end":765,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50077,"byte_end":50111,"line_start":766,"line_end":766,"column_start":1,"column_end":35}},{"value":"/ let x: u8 = (1.04E+17).as_(); // UB","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50112,"byte_end":50151,"line_start":767,"line_end":767,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50152,"byte_end":50159,"line_start":768,"line_end":768,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50160,"byte_end":50163,"line_start":769,"line_end":769,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50304,"byte_end":50307,"line_start":775,"line_end":775,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"pub fn as_(Self) -> T","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[{"value":"/ Convert a value to another, using the `as` operator.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50240,"byte_end":50296,"line_start":774,"line_end":774,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":185},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":228},{"krate":0,"index":236},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":1882},{"krate":0,"index":1902},{"krate":0,"index":1922}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":198},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52033,"byte_end":52042,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[{"value":"/ Generic trait for floating point numbers that works with `no_std`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":51891,"byte_end":51961,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":51962,"byte_end":51965,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait implements a subset of the `Float` trait.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":51966,"byte_end":52022,"line_start":15,"line_end":15,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52439,"byte_end":52447,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"pub fn infinity() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[{"value":"/ Returns positive infinity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52105,"byte_end":52135,"line_start":17,"line_end":17,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52140,"byte_end":52143,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52148,"byte_end":52162,"line_start":19,"line_end":19,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52167,"byte_end":52170,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52175,"byte_end":52182,"line_start":21,"line_end":21,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52187,"byte_end":52224,"line_start":22,"line_end":22,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52229,"byte_end":52253,"line_start":23,"line_end":23,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52258,"byte_end":52261,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52266,"byte_end":52300,"line_start":25,"line_end":25,"column_start":5,"column_end":39}},{"value":"/     assert!(T::infinity() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52305,"byte_end":52341,"line_start":26,"line_end":26,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52346,"byte_end":52351,"line_start":27,"line_end":27,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52356,"byte_end":52359,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52364,"byte_end":52389,"line_start":29,"line_end":29,"column_start":5,"column_end":30}},{"value":"/ check(f64::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52394,"byte_end":52419,"line_start":30,"line_end":30,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52424,"byte_end":52431,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52810,"byte_end":52822,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"pub fn neg_infinity() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[{"value":"/ Returns negative infinity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52464,"byte_end":52494,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52499,"byte_end":52502,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52507,"byte_end":52521,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52526,"byte_end":52529,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52534,"byte_end":52541,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52546,"byte_end":52583,"line_start":39,"line_end":39,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52588,"byte_end":52612,"line_start":40,"line_end":40,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52617,"byte_end":52620,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52625,"byte_end":52659,"line_start":42,"line_end":42,"column_start":5,"column_end":39}},{"value":"/     assert!(T::neg_infinity() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52664,"byte_end":52704,"line_start":43,"line_end":43,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52709,"byte_end":52714,"line_start":44,"line_end":44,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52719,"byte_end":52722,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52727,"byte_end":52756,"line_start":46,"line_end":46,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52761,"byte_end":52790,"line_start":47,"line_end":47,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52795,"byte_end":52802,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53132,"byte_end":53135,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"pub fn nan() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[{"value":"/ Returns NaN.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52839,"byte_end":52855,"line_start":51,"line_end":51,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52860,"byte_end":52863,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52868,"byte_end":52882,"line_start":53,"line_end":53,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52887,"byte_end":52890,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52895,"byte_end":52902,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52907,"byte_end":52944,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52949,"byte_end":52952,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>() {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52957,"byte_end":52987,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/     let n = T::nan();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52992,"byte_end":53017,"line_start":59,"line_end":59,"column_start":5,"column_end":30}},{"value":"/     assert!(n != n);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53022,"byte_end":53046,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53051,"byte_end":53056,"line_start":61,"line_end":61,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53061,"byte_end":53064,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ check::<f32>();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53069,"byte_end":53088,"line_start":63,"line_end":63,"column_start":5,"column_end":24}},{"value":"/ check::<f64>();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53093,"byte_end":53112,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53117,"byte_end":53124,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53551,"byte_end":53559,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"pub fn neg_zero() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[{"value":"/ Returns `-0.0`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53152,"byte_end":53171,"line_start":68,"line_end":68,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53176,"byte_end":53179,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53184,"byte_end":53198,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53203,"byte_end":53206,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53211,"byte_end":53218,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53223,"byte_end":53260,"line_start":73,"line_end":73,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53265,"byte_end":53289,"line_start":74,"line_end":74,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53294,"byte_end":53297,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(n: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53302,"byte_end":53336,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/     let z = T::neg_zero();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53341,"byte_end":53371,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/     assert!(z.is_zero());","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53376,"byte_end":53405,"line_start":78,"line_end":78,"column_start":5,"column_end":34}},{"value":"/     assert!(T::one() / z == n);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53410,"byte_end":53445,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53450,"byte_end":53455,"line_start":80,"line_end":80,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53460,"byte_end":53463,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53468,"byte_end":53497,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53502,"byte_end":53531,"line_start":83,"line_end":83,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53536,"byte_end":53543,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53938,"byte_end":53947,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest finite value that this type can represent.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53576,"byte_end":53643,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53648,"byte_end":53651,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53656,"byte_end":53670,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53675,"byte_end":53678,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53683,"byte_end":53690,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53695,"byte_end":53732,"line_start":92,"line_end":92,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53737,"byte_end":53761,"line_start":93,"line_end":93,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53766,"byte_end":53769,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53774,"byte_end":53808,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_value() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53813,"byte_end":53850,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53855,"byte_end":53860,"line_start":97,"line_end":97,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53865,"byte_end":53868,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53873,"byte_end":53893,"line_start":99,"line_end":99,"column_start":5,"column_end":25}},{"value":"/ check(f64::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53898,"byte_end":53918,"line_start":100,"line_end":100,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53923,"byte_end":53930,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54367,"byte_end":54385,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"pub fn min_positive_value() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest positive, normalized value that this type can represent.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":53964,"byte_end":54045,"line_start":104,"line_end":104,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54050,"byte_end":54053,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54058,"byte_end":54072,"line_start":106,"line_end":106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54077,"byte_end":54080,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54085,"byte_end":54092,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54097,"byte_end":54134,"line_start":109,"line_end":109,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54139,"byte_end":54163,"line_start":110,"line_end":110,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54168,"byte_end":54171,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54176,"byte_end":54210,"line_start":112,"line_end":112,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_positive_value() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54215,"byte_end":54261,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54266,"byte_end":54271,"line_start":114,"line_end":114,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54276,"byte_end":54279,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN_POSITIVE);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54284,"byte_end":54313,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/ check(f64::MIN_POSITIVE);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54318,"byte_end":54347,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54352,"byte_end":54359,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54747,"byte_end":54754,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"pub fn epsilon() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[{"value":"/ Returns epsilon, a small positive value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54402,"byte_end":54446,"line_start":121,"line_end":121,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54451,"byte_end":54454,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54459,"byte_end":54473,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54478,"byte_end":54481,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54486,"byte_end":54493,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54498,"byte_end":54535,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54540,"byte_end":54564,"line_start":127,"line_end":127,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54569,"byte_end":54572,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54577,"byte_end":54611,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     assert!(T::epsilon() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54616,"byte_end":54651,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54656,"byte_end":54661,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54666,"byte_end":54669,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ check(f32::EPSILON);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54674,"byte_end":54698,"line_start":133,"line_end":133,"column_start":5,"column_end":29}},{"value":"/ check(f64::EPSILON);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54703,"byte_end":54727,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54732,"byte_end":54739,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55132,"byte_end":55141,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the largest finite value that this type can represent.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54771,"byte_end":54837,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54842,"byte_end":54845,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54850,"byte_end":54864,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54869,"byte_end":54872,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54877,"byte_end":54884,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54889,"byte_end":54926,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54931,"byte_end":54955,"line_start":144,"line_end":144,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54960,"byte_end":54963,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":54968,"byte_end":55002,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/     assert!(T::max_value() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55007,"byte_end":55044,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55049,"byte_end":55054,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55059,"byte_end":55062,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55067,"byte_end":55087,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ check(f64::MAX);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55092,"byte_end":55112,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55117,"byte_end":55124,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55591,"byte_end":55597,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is NaN.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55158,"byte_end":55198,"line_start":155,"line_end":155,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55203,"byte_end":55206,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55211,"byte_end":55225,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55230,"byte_end":55233,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55238,"byte_end":55245,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55250,"byte_end":55287,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55292,"byte_end":55316,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55321,"byte_end":55324,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55329,"byte_end":55372,"line_start":163,"line_end":163,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_nan() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55377,"byte_end":55410,"line_start":164,"line_end":164,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55415,"byte_end":55420,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55425,"byte_end":55428,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ check(f32::NAN, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55433,"byte_end":55459,"line_start":167,"line_end":167,"column_start":5,"column_end":31}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55464,"byte_end":55496,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/ check(f64::NAN, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55501,"byte_end":55527,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55532,"byte_end":55557,"line_start":170,"line_end":170,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55562,"byte_end":55569,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55574,"byte_end":55583,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56174,"byte_end":56185,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is infinite.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55646,"byte_end":55691,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55696,"byte_end":55699,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55704,"byte_end":55718,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55723,"byte_end":55726,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55731,"byte_end":55738,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55743,"byte_end":55780,"line_start":182,"line_end":182,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55785,"byte_end":55809,"line_start":183,"line_end":183,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55814,"byte_end":55817,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55822,"byte_end":55865,"line_start":185,"line_end":185,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_infinite() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55870,"byte_end":55908,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55913,"byte_end":55918,"line_start":187,"line_end":187,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55923,"byte_end":55926,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55931,"byte_end":55962,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ check(f32::NEG_INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":55967,"byte_end":56002,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ check(f32::NAN, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56007,"byte_end":56034,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ check(f64::INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56039,"byte_end":56070,"line_start":192,"line_end":192,"column_start":5,"column_end":36}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56075,"byte_end":56110,"line_start":193,"line_end":193,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56115,"byte_end":56140,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56145,"byte_end":56152,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56157,"byte_end":56166,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56786,"byte_end":56795,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither infinite or NaN.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56278,"byte_end":56338,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56343,"byte_end":56346,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56351,"byte_end":56365,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56370,"byte_end":56373,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56378,"byte_end":56385,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56390,"byte_end":56427,"line_start":206,"line_end":206,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56432,"byte_end":56456,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56461,"byte_end":56464,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56469,"byte_end":56512,"line_start":209,"line_end":209,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_finite() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56517,"byte_end":56553,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56558,"byte_end":56563,"line_start":211,"line_end":211,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56568,"byte_end":56571,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56576,"byte_end":56608,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56613,"byte_end":56639,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56644,"byte_end":56680,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56685,"byte_end":56720,"line_start":216,"line_end":216,"column_start":5,"column_end":40}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56725,"byte_end":56752,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56757,"byte_end":56764,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56769,"byte_end":56778,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57393,"byte_end":57402,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal or NaN.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56870,"byte_end":56947,"line_start":224,"line_end":224,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56952,"byte_end":56955,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56960,"byte_end":56974,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56979,"byte_end":56982,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56987,"byte_end":56994,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":56999,"byte_end":57036,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57041,"byte_end":57065,"line_start":230,"line_end":230,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57070,"byte_end":57073,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57078,"byte_end":57121,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_normal() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57126,"byte_end":57162,"line_start":233,"line_end":233,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57167,"byte_end":57172,"line_start":234,"line_end":234,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57177,"byte_end":57180,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57185,"byte_end":57217,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57222,"byte_end":57248,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57253,"byte_end":57289,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57294,"byte_end":57329,"line_start":239,"line_end":239,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57334,"byte_end":57359,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57364,"byte_end":57371,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57376,"byte_end":57385,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58241,"byte_end":58249,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57476,"byte_end":57551,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57556,"byte_end":57625,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ predicate instead.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57630,"byte_end":57652,"line_start":249,"line_end":249,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57657,"byte_end":57660,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57665,"byte_end":57679,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57684,"byte_end":57687,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57692,"byte_end":57699,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57704,"byte_end":57741,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57746,"byte_end":57770,"line_start":255,"line_end":255,"column_start":5,"column_end":29}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57775,"byte_end":57804,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57809,"byte_end":57812,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, c: FpCategory) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57817,"byte_end":57866,"line_start":258,"line_end":258,"column_start":5,"column_end":54}},{"value":"/     assert!(x.classify() == c);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57871,"byte_end":57906,"line_start":259,"line_end":259,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57911,"byte_end":57916,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57921,"byte_end":57924,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, FpCategory::Infinite);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57929,"byte_end":57976,"line_start":262,"line_end":262,"column_start":5,"column_end":52}},{"value":"/ check(f32::MAX, FpCategory::Normal);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":57981,"byte_end":58021,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/ check(f64::NAN, FpCategory::Nan);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58026,"byte_end":58063,"line_start":264,"line_end":264,"column_start":5,"column_end":42}},{"value":"/ check(f64::MIN_POSITIVE, FpCategory::Normal);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58068,"byte_end":58117,"line_start":265,"line_end":265,"column_start":5,"column_end":54}},{"value":"/ check(f64::MIN_POSITIVE / 2.0, FpCategory::Subnormal);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58122,"byte_end":58180,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"/ check(0.0f64, FpCategory::Zero);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58185,"byte_end":58221,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58226,"byte_end":58233,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58882,"byte_end":58887,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58276,"byte_end":58339,"line_start":271,"line_end":271,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58344,"byte_end":58347,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58352,"byte_end":58366,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58371,"byte_end":58374,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58379,"byte_end":58386,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58391,"byte_end":58428,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58433,"byte_end":58457,"line_start":277,"line_end":277,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58462,"byte_end":58465,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58470,"byte_end":58510,"line_start":279,"line_end":279,"column_start":5,"column_end":45}},{"value":"/     assert!(x.floor() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58515,"byte_end":58547,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58552,"byte_end":58557,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58562,"byte_end":58565,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58570,"byte_end":58610,"line_start":283,"line_end":283,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58615,"byte_end":58638,"line_start":284,"line_end":284,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58643,"byte_end":58666,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58671,"byte_end":58694,"line_start":286,"line_end":286,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58699,"byte_end":58723,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58728,"byte_end":58753,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58758,"byte_end":58783,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58788,"byte_end":58813,"line_start":290,"line_end":290,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58818,"byte_end":58848,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58853,"byte_end":58860,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":58865,"byte_end":58874,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59733,"byte_end":59737,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59124,"byte_end":59191,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59196,"byte_end":59199,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59204,"byte_end":59218,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59223,"byte_end":59226,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59231,"byte_end":59238,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59243,"byte_end":59280,"line_start":310,"line_end":310,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59285,"byte_end":59309,"line_start":311,"line_end":311,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59314,"byte_end":59317,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59322,"byte_end":59362,"line_start":313,"line_end":313,"column_start":5,"column_end":45}},{"value":"/     assert!(x.ceil() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59367,"byte_end":59398,"line_start":314,"line_end":314,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59403,"byte_end":59408,"line_start":315,"line_end":315,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59413,"byte_end":59416,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59421,"byte_end":59461,"line_start":317,"line_end":317,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59466,"byte_end":59489,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59494,"byte_end":59517,"line_start":319,"line_end":319,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59522,"byte_end":59545,"line_start":320,"line_end":320,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59550,"byte_end":59574,"line_start":321,"line_end":321,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59579,"byte_end":59604,"line_start":322,"line_end":322,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59609,"byte_end":59634,"line_start":323,"line_end":323,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59639,"byte_end":59664,"line_start":324,"line_end":324,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59669,"byte_end":59699,"line_start":325,"line_end":325,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59704,"byte_end":59711,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59716,"byte_end":59725,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60569,"byte_end":60574,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"/ Returns the nearest integer to a number. Round half-way cases away from `0.0`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":59974,"byte_end":60056,"line_start":339,"line_end":339,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60061,"byte_end":60064,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60069,"byte_end":60083,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60088,"byte_end":60091,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60096,"byte_end":60103,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60108,"byte_end":60145,"line_start":344,"line_end":344,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60150,"byte_end":60174,"line_start":345,"line_end":345,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60179,"byte_end":60182,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60187,"byte_end":60227,"line_start":347,"line_end":347,"column_start":5,"column_end":45}},{"value":"/     assert!(x.round() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60232,"byte_end":60264,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60269,"byte_end":60274,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60279,"byte_end":60282,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60287,"byte_end":60327,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ check(0.4f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60332,"byte_end":60355,"line_start":352,"line_end":352,"column_start":5,"column_end":28}},{"value":"/ check(0.5f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60360,"byte_end":60383,"line_start":353,"line_end":353,"column_start":5,"column_end":28}},{"value":"/ check(0.6f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60388,"byte_end":60411,"line_start":354,"line_end":354,"column_start":5,"column_end":28}},{"value":"/ check(-0.4f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60416,"byte_end":60440,"line_start":355,"line_end":355,"column_start":5,"column_end":29}},{"value":"/ check(-0.5f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60445,"byte_end":60470,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ check(-0.6f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60475,"byte_end":60500,"line_start":357,"line_end":357,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60505,"byte_end":60535,"line_start":358,"line_end":358,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60540,"byte_end":60547,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":60552,"byte_end":60561,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61665,"byte_end":61670,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"/ Return the integer part of a number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61082,"byte_end":61122,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61127,"byte_end":61130,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61135,"byte_end":61149,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61154,"byte_end":61157,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61162,"byte_end":61169,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61174,"byte_end":61211,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61216,"byte_end":61240,"line_start":388,"line_end":388,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61245,"byte_end":61248,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61253,"byte_end":61293,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/     assert!(x.trunc() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61298,"byte_end":61330,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61335,"byte_end":61340,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61345,"byte_end":61348,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61353,"byte_end":61393,"line_start":394,"line_end":394,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61398,"byte_end":61421,"line_start":395,"line_end":395,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61426,"byte_end":61449,"line_start":396,"line_end":396,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61454,"byte_end":61477,"line_start":397,"line_end":397,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61482,"byte_end":61506,"line_start":398,"line_end":398,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61511,"byte_end":61536,"line_start":399,"line_end":399,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61541,"byte_end":61566,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61571,"byte_end":61596,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61601,"byte_end":61631,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61636,"byte_end":61643,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61648,"byte_end":61657,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62391,"byte_end":62396,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"pub fn fract(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"/ Returns the fractional part of a number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61817,"byte_end":61861,"line_start":414,"line_end":414,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61866,"byte_end":61869,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61874,"byte_end":61888,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61893,"byte_end":61896,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61901,"byte_end":61908,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61913,"byte_end":61950,"line_start":419,"line_end":419,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61955,"byte_end":61979,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61984,"byte_end":61987,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":61992,"byte_end":62032,"line_start":422,"line_end":422,"column_start":5,"column_end":45}},{"value":"/     assert!(x.fract() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62037,"byte_end":62069,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62074,"byte_end":62079,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62084,"byte_end":62087,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62092,"byte_end":62117,"line_start":426,"line_end":426,"column_start":5,"column_end":30}},{"value":"/ check(0.75f32, 0.75);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62122,"byte_end":62147,"line_start":427,"line_end":427,"column_start":5,"column_end":30}},{"value":"/ check(1.0f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62152,"byte_end":62175,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/ check(1.25f32, 0.25);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62180,"byte_end":62205,"line_start":429,"line_end":429,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62210,"byte_end":62234,"line_start":430,"line_end":430,"column_start":5,"column_end":29}},{"value":"/ check(-0.75f64, -0.75);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62239,"byte_end":62266,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/ check(-1.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62271,"byte_end":62295,"line_start":432,"line_end":432,"column_start":5,"column_end":29}},{"value":"/ check(-1.25f64, -0.25);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62300,"byte_end":62327,"line_start":433,"line_end":433,"column_start":5,"column_end":32}},{"value":"/ check(f64::MIN, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62332,"byte_end":62357,"line_start":434,"line_end":434,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62362,"byte_end":62369,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62374,"byte_end":62383,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63101,"byte_end":63104,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`. Returns `FloatCore::nan()` if the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62535,"byte_end":62611,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"/ number is `FloatCore::nan()`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62616,"byte_end":62649,"line_start":446,"line_end":446,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62654,"byte_end":62657,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62662,"byte_end":62676,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62681,"byte_end":62684,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62689,"byte_end":62696,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62701,"byte_end":62738,"line_start":451,"line_end":451,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62743,"byte_end":62767,"line_start":452,"line_end":452,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62772,"byte_end":62775,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62780,"byte_end":62820,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/     assert!(x.abs() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62825,"byte_end":62855,"line_start":455,"line_end":455,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62860,"byte_end":62865,"line_start":456,"line_end":456,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62870,"byte_end":62873,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62878,"byte_end":62918,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62923,"byte_end":62946,"line_start":459,"line_end":459,"column_start":5,"column_end":28}},{"value":"/ check(0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62951,"byte_end":62974,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":62979,"byte_end":63003,"line_start":461,"line_end":461,"column_start":5,"column_end":29}},{"value":"/ check(-1.0f64, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63008,"byte_end":63032,"line_start":462,"line_end":462,"column_start":5,"column_end":29}},{"value":"/ check(f64::MIN, f64::MAX);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63037,"byte_end":63067,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63072,"byte_end":63079,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63084,"byte_end":63093,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64028,"byte_end":64034,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63297,"byte_end":63353,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63358,"byte_end":63361,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `FloatCore::infinity()`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63366,"byte_end":63438,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `FloatCore::neg_infinity()`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63443,"byte_end":63520,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"/ - `FloatCore::nan()` if the number is `FloatCore::nan()`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63525,"byte_end":63585,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63590,"byte_end":63593,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63598,"byte_end":63612,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63617,"byte_end":63620,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63625,"byte_end":63632,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63637,"byte_end":63674,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63679,"byte_end":63703,"line_start":486,"line_end":486,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63708,"byte_end":63711,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63716,"byte_end":63756,"line_start":488,"line_end":488,"column_start":5,"column_end":45}},{"value":"/     assert!(x.signum() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63761,"byte_end":63794,"line_start":489,"line_end":489,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63799,"byte_end":63804,"line_start":490,"line_end":490,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63809,"byte_end":63812,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63817,"byte_end":63847,"line_start":492,"line_end":492,"column_start":5,"column_end":35}},{"value":"/ check(3.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63852,"byte_end":63875,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/ check(0.0f32, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63880,"byte_end":63903,"line_start":494,"line_end":494,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63908,"byte_end":63933,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ check(-3.0f64, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63938,"byte_end":63963,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63968,"byte_end":63994,"line_start":497,"line_end":497,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":63999,"byte_end":64006,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64011,"byte_end":64020,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64896,"byte_end":64912,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive, including `+0.0` and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64233,"byte_end":64295,"line_start":510,"line_end":510,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::infinity()`, and since Rust 1.20 also","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64300,"byte_end":64353,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ `FloatCore::nan()`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64358,"byte_end":64381,"line_start":512,"line_end":512,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64386,"byte_end":64389,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64394,"byte_end":64408,"line_start":514,"line_end":514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64413,"byte_end":64416,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64421,"byte_end":64428,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64433,"byte_end":64470,"line_start":517,"line_end":517,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64475,"byte_end":64499,"line_start":518,"line_end":518,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64504,"byte_end":64507,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64512,"byte_end":64555,"line_start":520,"line_end":520,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_positive() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64560,"byte_end":64603,"line_start":521,"line_end":521,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64608,"byte_end":64613,"line_start":522,"line_end":522,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64618,"byte_end":64621,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64626,"byte_end":64657,"line_start":524,"line_end":524,"column_start":5,"column_end":36}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64662,"byte_end":64688,"line_start":525,"line_end":525,"column_start":5,"column_end":31}},{"value":"/ check(0.0f32, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64693,"byte_end":64717,"line_start":526,"line_end":526,"column_start":5,"column_end":29}},{"value":"/ check(-0.0f64, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64722,"byte_end":64748,"line_start":527,"line_end":527,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64753,"byte_end":64789,"line_start":528,"line_end":528,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64794,"byte_end":64829,"line_start":529,"line_end":529,"column_start":5,"column_end":40}},{"value":"/ check(-f64::NAN, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64834,"byte_end":64862,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64867,"byte_end":64874,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64879,"byte_end":64888,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65642,"byte_end":65658,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative, including `-0.0` and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":64973,"byte_end":65035,"line_start":537,"line_end":537,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::neg_infinity()`, and since Rust 1.20 also","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65040,"byte_end":65097,"line_start":538,"line_end":538,"column_start":5,"column_end":62}},{"value":"/ `-FloatCore::nan()`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65102,"byte_end":65126,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65131,"byte_end":65134,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65139,"byte_end":65153,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65158,"byte_end":65161,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65166,"byte_end":65173,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65178,"byte_end":65215,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65220,"byte_end":65244,"line_start":545,"line_end":545,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65249,"byte_end":65252,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65257,"byte_end":65300,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_negative() == p);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65305,"byte_end":65348,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65353,"byte_end":65358,"line_start":549,"line_end":549,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65363,"byte_end":65366,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65371,"byte_end":65403,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65408,"byte_end":65435,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ check(0.0f32, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65440,"byte_end":65465,"line_start":553,"line_end":553,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65470,"byte_end":65495,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65500,"byte_end":65535,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ check(f64::MIN_POSITIVE, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65540,"byte_end":65576,"line_start":556,"line_end":556,"column_start":5,"column_end":41}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65581,"byte_end":65608,"line_start":557,"line_end":557,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65613,"byte_end":65620,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65625,"byte_end":65634,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66291,"byte_end":66294,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65753,"byte_end":65796,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65801,"byte_end":65804,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65809,"byte_end":65881,"line_start":567,"line_end":567,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65886,"byte_end":65889,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65894,"byte_end":65908,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65913,"byte_end":65916,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65921,"byte_end":65928,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65933,"byte_end":65970,"line_start":572,"line_end":572,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":65975,"byte_end":65999,"line_start":573,"line_end":573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66004,"byte_end":66007,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66012,"byte_end":66060,"line_start":575,"line_end":575,"column_start":5,"column_end":53}},{"value":"/     assert!(x.min(y) == min);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66065,"byte_end":66098,"line_start":576,"line_end":576,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66103,"byte_end":66108,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66113,"byte_end":66116,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66121,"byte_end":66149,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ check(f32::NAN, 2.0, 2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66154,"byte_end":66184,"line_start":580,"line_end":580,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, -2.0, -2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66189,"byte_end":66219,"line_start":581,"line_end":581,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, f64::NAN, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66224,"byte_end":66257,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66262,"byte_end":66269,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66274,"byte_end":66283,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67091,"byte_end":67094,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66549,"byte_end":66592,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66597,"byte_end":66600,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66605,"byte_end":66677,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66682,"byte_end":66685,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66690,"byte_end":66704,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66709,"byte_end":66712,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66717,"byte_end":66724,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66729,"byte_end":66766,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66771,"byte_end":66795,"line_start":607,"line_end":607,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66800,"byte_end":66803,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, max: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66808,"byte_end":66856,"line_start":609,"line_end":609,"column_start":5,"column_end":53}},{"value":"/     assert!(x.max(y) == max);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66861,"byte_end":66894,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66899,"byte_end":66904,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66909,"byte_end":66912,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66917,"byte_end":66945,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/ check(1.0f32, f32::NAN, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66950,"byte_end":66983,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/ check(-1.0f64, 2.0, 2.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":66988,"byte_end":67017,"line_start":615,"line_end":615,"column_start":5,"column_end":34}},{"value":"/ check(-1.0f64, f64::NAN, -1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67022,"byte_end":67057,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67062,"byte_end":67069,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67074,"byte_end":67083,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67849,"byte_end":67854,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"/ Returns the reciprocal (multiplicative inverse) of the number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67349,"byte_end":67415,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67420,"byte_end":67423,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67428,"byte_end":67442,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67447,"byte_end":67450,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67455,"byte_end":67462,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67467,"byte_end":67504,"line_start":638,"line_end":638,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67509,"byte_end":67533,"line_start":639,"line_end":639,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67538,"byte_end":67541,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67546,"byte_end":67586,"line_start":641,"line_end":641,"column_start":5,"column_end":45}},{"value":"/     assert!(x.recip() == y);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67591,"byte_end":67623,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"/     assert!(y.recip() == x);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67628,"byte_end":67660,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67665,"byte_end":67670,"line_start":644,"line_end":644,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67675,"byte_end":67678,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67683,"byte_end":67713,"line_start":646,"line_end":646,"column_start":5,"column_end":35}},{"value":"/ check(2.0f32, 0.5);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67718,"byte_end":67741,"line_start":647,"line_end":647,"column_start":5,"column_end":28}},{"value":"/ check(-0.25f64, -4.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67746,"byte_end":67772,"line_start":648,"line_end":648,"column_start":5,"column_end":31}},{"value":"/ check(-0.0f64, f64::NEG_INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67777,"byte_end":67815,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67820,"byte_end":67827,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67832,"byte_end":67841,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68448,"byte_end":68452,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"pub fn powi(Self, i32) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"/ Raise a number to an integer power.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67909,"byte_end":67948,"line_start":656,"line_end":656,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67953,"byte_end":67956,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Using this function is generally faster than using `powf`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":67961,"byte_end":68022,"line_start":658,"line_end":658,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68027,"byte_end":68030,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68035,"byte_end":68049,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68054,"byte_end":68057,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68062,"byte_end":68069,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68074,"byte_end":68111,"line_start":663,"line_end":663,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68116,"byte_end":68119,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, exp: i32, powi: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68124,"byte_end":68177,"line_start":665,"line_end":665,"column_start":5,"column_end":58}},{"value":"/     assert!(x.powi(exp) == powi);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68182,"byte_end":68219,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68224,"byte_end":68229,"line_start":667,"line_end":667,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68234,"byte_end":68237,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ check(9.0f32, 2, 81.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68242,"byte_end":68269,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/ check(1.0f32, -2, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68274,"byte_end":68301,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ check(10.0f64, 20, 1e20);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68306,"byte_end":68335,"line_start":671,"line_end":671,"column_start":5,"column_end":34}},{"value":"/ check(4.0f64, -2, 0.0625);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68340,"byte_end":68370,"line_start":672,"line_end":672,"column_start":5,"column_end":35}},{"value":"/ check(-1.0f64, std::i32::MIN, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68375,"byte_end":68414,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68419,"byte_end":68426,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68431,"byte_end":68440,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69369,"byte_end":69379,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[{"value":"/ Converts to degrees, assuming the number is in radians.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68894,"byte_end":68953,"line_start":687,"line_end":687,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68958,"byte_end":68961,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68966,"byte_end":68980,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68985,"byte_end":68988,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":68993,"byte_end":69000,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69005,"byte_end":69042,"line_start":692,"line_end":692,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69047,"byte_end":69071,"line_start":693,"line_end":693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69076,"byte_end":69079,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(rad: T, deg: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69084,"byte_end":69128,"line_start":695,"line_end":695,"column_start":5,"column_end":49}},{"value":"/     assert!(rad.to_degrees() == deg);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69133,"byte_end":69174,"line_start":696,"line_end":696,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69179,"byte_end":69184,"line_start":697,"line_end":697,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69189,"byte_end":69192,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69197,"byte_end":69220,"line_start":699,"line_end":699,"column_start":5,"column_end":28}},{"value":"/ check(f32::consts::PI, 180.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69225,"byte_end":69259,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ check(f64::consts::FRAC_PI_4, 45.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69264,"byte_end":69304,"line_start":701,"line_end":701,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69309,"byte_end":69349,"line_start":702,"line_end":702,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69354,"byte_end":69361,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69875,"byte_end":69885,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[{"value":"/ Converts to radians, assuming the number is in degrees.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69400,"byte_end":69459,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69464,"byte_end":69467,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69472,"byte_end":69486,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69491,"byte_end":69494,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69499,"byte_end":69506,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69511,"byte_end":69548,"line_start":711,"line_end":711,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69553,"byte_end":69577,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69582,"byte_end":69585,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(deg: T, rad: T) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69590,"byte_end":69634,"line_start":714,"line_end":714,"column_start":5,"column_end":49}},{"value":"/     assert!(deg.to_radians() == rad);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69639,"byte_end":69680,"line_start":715,"line_end":715,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69685,"byte_end":69690,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69695,"byte_end":69698,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69703,"byte_end":69726,"line_start":718,"line_end":718,"column_start":5,"column_end":28}},{"value":"/ check(180.0, f32::consts::PI);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69731,"byte_end":69765,"line_start":719,"line_end":719,"column_start":5,"column_end":39}},{"value":"/ check(45.0, f64::consts::FRAC_PI_4);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69770,"byte_end":69810,"line_start":720,"line_end":720,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69815,"byte_end":69855,"line_start":721,"line_end":721,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69860,"byte_end":69867,"line_start":722,"line_end":722,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70644,"byte_end":70658,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"pub fn integer_decode(Self) -> (u64, i16, i8)","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[{"value":"/ Returns the mantissa, base 2 exponent, and sign as integers, respectively.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69906,"byte_end":69984,"line_start":725,"line_end":725,"column_start":5,"column_end":83}},{"value":"/ The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":69989,"byte_end":70066,"line_start":726,"line_end":726,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70071,"byte_end":70074,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70079,"byte_end":70093,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70098,"byte_end":70101,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70106,"byte_end":70113,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70118,"byte_end":70155,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70160,"byte_end":70184,"line_start":732,"line_end":732,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70189,"byte_end":70192,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, m: u64, e: i16, s:i8) {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70197,"byte_end":70253,"line_start":734,"line_end":734,"column_start":5,"column_end":61}},{"value":"/     let (mantissa, exponent, sign) = x.integer_decode();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70258,"byte_end":70318,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(mantissa, m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70323,"byte_end":70355,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(exponent, e);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70360,"byte_end":70392,"line_start":737,"line_end":737,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(sign, s);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70397,"byte_end":70425,"line_start":738,"line_end":738,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70430,"byte_end":70435,"line_start":739,"line_end":739,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70440,"byte_end":70443,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ check(2.0f32, 1 << 23, -22, 1);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70448,"byte_end":70483,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ check(-2.0f32, 1 << 23, -22, -1);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70488,"byte_end":70525,"line_start":742,"line_end":742,"column_start":5,"column_end":42}},{"value":"/ check(f32::INFINITY, 1 << 23, 105, 1);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70530,"byte_end":70572,"line_start":743,"line_end":743,"column_start":5,"column_end":47}},{"value":"/ check(f64::NEG_INFINITY, 1 << 52, 972, -1);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70577,"byte_end":70624,"line_start":744,"line_end":744,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":70629,"byte_end":70636,"line_start":745,"line_end":745,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111345,"byte_end":111346,"line_start":2283,"line_end":2283,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"pub fn E() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111386,"byte_end":111395,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"pub fn FRAC_1_PI() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111442,"byte_end":111455,"line_start":2287,"line_end":2287,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"pub fn FRAC_1_SQRT_2() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111495,"byte_end":111504,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"pub fn FRAC_2_PI() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111550,"byte_end":111564,"line_start":2291,"line_end":2291,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"pub fn FRAC_2_SQRT_PI() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111604,"byte_end":111613,"line_start":2293,"line_end":2293,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"pub fn FRAC_PI_2() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111653,"byte_end":111662,"line_start":2295,"line_end":2295,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"pub fn FRAC_PI_3() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111702,"byte_end":111711,"line_start":2297,"line_end":2297,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"pub fn FRAC_PI_4() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111751,"byte_end":111760,"line_start":2299,"line_end":2299,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"pub fn FRAC_PI_6() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111800,"byte_end":111809,"line_start":2301,"line_end":2301,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"pub fn FRAC_PI_8() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111849,"byte_end":111854,"line_start":2303,"line_end":2303,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"pub fn LN_10() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111893,"byte_end":111897,"line_start":2305,"line_end":2305,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"pub fn LN_2() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111937,"byte_end":111944,"line_start":2307,"line_end":2307,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"pub fn LOG10_E() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":111983,"byte_end":111989,"line_start":2309,"line_end":2309,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"pub fn LOG2_E() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":112046,"byte_end":112048,"line_start":2311,"line_end":2311,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"pub fn PI() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":112089,"byte_end":112095,"line_start":2313,"line_end":2313,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"pub fn SQRT_2() -> Self","parent":{"krate":0,"index":1882},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":246},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":4259},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":256},{"krate":0,"index":261},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2014},{"krate":0,"index":2017},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":272}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":251},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114625,"byte_end":114629,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines an additive identity element for `Self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114450,"byte_end":114502,"line_start":4,"line_end":4,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114503,"byte_end":114506,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114507,"byte_end":114517,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114518,"byte_end":114521,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114522,"byte_end":114536,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ a + 0 = a       ∀ a ∈ Self","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114537,"byte_end":114571,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/ 0 + a = a       ∀ a ∈ Self","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114572,"byte_end":114606,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114607,"byte_end":114614,"line_start":11,"line_end":11,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114999,"byte_end":115003,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[{"value":"/ Returns the additive identity element of `Self`, `0`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114670,"byte_end":114727,"line_start":13,"line_end":13,"column_start":5,"column_end":62}},{"value":"/ # Purity","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114732,"byte_end":114744,"line_start":14,"line_end":14,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114749,"byte_end":114752,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114757,"byte_end":114831,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114836,"byte_end":114902,"line_start":17,"line_end":17,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114907,"byte_end":114925,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115092,"byte_end":115100,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"pub fn set_zero(&mut Self)","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the additive identity element of `Self`, `0`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115020,"byte_end":115084,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115226,"byte_end":115233,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the additive identity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115155,"byte_end":115218,"line_start":27,"line_end":27,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":261},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116320,"byte_end":116323,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines a multiplicative identity element for `Self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116140,"byte_end":116197,"line_start":82,"line_end":82,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116198,"byte_end":116201,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116202,"byte_end":116212,"line_start":84,"line_end":84,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116213,"byte_end":116216,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116217,"byte_end":116231,"line_start":86,"line_end":86,"column_start":1,"column_end":15}},{"value":"/ a * 1 = a       ∀ a ∈ Self","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116232,"byte_end":116266,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ 1 * a = a       ∀ a ∈ Self","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116267,"byte_end":116301,"line_start":88,"line_end":88,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116302,"byte_end":116309,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116707,"byte_end":116710,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116364,"byte_end":116427,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116432,"byte_end":116435,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116440,"byte_end":116452,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116457,"byte_end":116460,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116465,"byte_end":116539,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116544,"byte_end":116610,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116615,"byte_end":116633,"line_start":97,"line_end":97,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116805,"byte_end":116812,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"pub fn set_one(&mut Self)","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116727,"byte_end":116797,"line_start":101,"line_end":101,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117157,"byte_end":117163,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"pub fn is_one(&Self) -> bool where Self: PartialEq","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the multiplicative identity.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116865,"byte_end":116934,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116939,"byte_end":116942,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For performance reasons, it's best to implement this manually.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116947,"byte_end":117013,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ After a semver bump, this method will be required, and the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117018,"byte_end":117080,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ `where Self: PartialEq` bound will be removed.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117085,"byte_end":117135,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117140,"byte_end":117149,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118186,"byte_end":118190,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"pub fn zero<T: Zero>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, `0`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118121,"byte_end":118160,"line_start":169,"line_end":169,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118161,"byte_end":118178,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118300,"byte_end":118303,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"pub fn one<T: One>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity, `1`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118229,"byte_end":118274,"line_start":175,"line_end":175,"column_start":1,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":118275,"byte_end":118292,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":274},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":2026},{"krate":0,"index":2043},{"krate":0,"index":2060},{"krate":0,"index":2077},{"krate":0,"index":2094},{"krate":0,"index":2111},{"krate":0,"index":2128},{"krate":0,"index":2145},{"krate":0,"index":2162},{"krate":0,"index":2179},{"krate":0,"index":2196},{"krate":0,"index":2213}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":288},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120875,"byte_end":120882,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[{"value":"/ Generic trait for primitive integers.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119219,"byte_end":119260,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119261,"byte_end":119264,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `PrimInt` trait is an abstraction over the builtin primitive integer types (e.g., `u8`,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119265,"byte_end":119360,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ `u32`, `isize`, `i128`, ...). It inherits the basic numeric traits and extends them with","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119361,"byte_end":119453,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ bitwise operators and non-wrapping arithmetic.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119454,"byte_end":119504,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119505,"byte_end":119508,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The trait explicitly inherits `Copy`, `Eq`, `Ord`, and `Sized`. The intention is that all","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119509,"byte_end":119602,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ types implementing this trait behave like primitive types that are passed by value by default","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119603,"byte_end":119700,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ and behave like builtin integers. Furthermore, the types are expected to expose the integer","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119701,"byte_end":119796,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ value in binary representation and support bitwise operators. The standard bitwise operations","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119797,"byte_end":119894,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ (e.g., bitwise-and, bitwise-or, right-shift, left-shift) are inherited and the trait extends","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119895,"byte_end":119991,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ these with introspective queries (e.g., `PrimInt::count_ones()`, `PrimInt::leading_zeros()`),","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":119992,"byte_end":120089,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ bitwise combinators (e.g., `PrimInt::rotate_left()`), and endianness converters (e.g.,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120090,"byte_end":120180,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ `PrimInt::to_be()`).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120181,"byte_end":120205,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120206,"byte_end":120209,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All `PrimInt` types are expected to be fixed-width binary integers. The width can be queried","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120210,"byte_end":120306,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ via `T::zero().count_zeros()`. The trait currently lacks a way to query the width at","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120307,"byte_end":120395,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ compile-time.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120396,"byte_end":120413,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120414,"byte_end":120417,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ While a default implementation for all builtin primitive integers is provided, the trait is in","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120418,"byte_end":120516,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ no way restricted to these. Other integer types that fulfil the requirements are free to","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120517,"byte_end":120609,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/ implement the trait was well.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120610,"byte_end":120643,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120644,"byte_end":120647,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait and many of the method names originate in the unstable `core::num::Int` trait from","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120648,"byte_end":120745,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ the rust standard library. The original trait was never stabilized and thus removed from the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120746,"byte_end":120842,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ standard library.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120843,"byte_end":120864,"line_start":33,"line_end":33,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121557,"byte_end":121567,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121302,"byte_end":121372,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121377,"byte_end":121380,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121385,"byte_end":121399,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121404,"byte_end":121407,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121412,"byte_end":121419,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121424,"byte_end":121452,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121457,"byte_end":121460,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121465,"byte_end":121490,"line_start":62,"line_end":62,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121495,"byte_end":121498,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_ones(), 3);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121503,"byte_end":121537,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121542,"byte_end":121549,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121844,"byte_end":121855,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121587,"byte_end":121658,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121663,"byte_end":121666,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121671,"byte_end":121685,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121690,"byte_end":121693,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121698,"byte_end":121705,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121710,"byte_end":121738,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121743,"byte_end":121746,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121751,"byte_end":121776,"line_start":75,"line_end":75,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121781,"byte_end":121784,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_zeros(), 5);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121789,"byte_end":121824,"line_start":77,"line_end":77,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121829,"byte_end":121836,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122151,"byte_end":122164,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121875,"byte_end":121943,"line_start":81,"line_end":81,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121948,"byte_end":121962,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121967,"byte_end":121970,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121975,"byte_end":121989,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121994,"byte_end":121997,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122002,"byte_end":122009,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122014,"byte_end":122042,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122047,"byte_end":122050,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122055,"byte_end":122080,"line_start":89,"line_end":89,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122085,"byte_end":122088,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_zeros(), 10);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122093,"byte_end":122131,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122136,"byte_end":122143,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122461,"byte_end":122475,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122184,"byte_end":122253,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122258,"byte_end":122272,"line_start":96,"line_end":96,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122277,"byte_end":122280,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122285,"byte_end":122299,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122304,"byte_end":122307,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122312,"byte_end":122319,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122324,"byte_end":122352,"line_start":101,"line_end":101,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122357,"byte_end":122360,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122365,"byte_end":122390,"line_start":103,"line_end":103,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122395,"byte_end":122398,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_zeros(), 3);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122403,"byte_end":122441,"line_start":105,"line_end":105,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122446,"byte_end":122453,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122863,"byte_end":122874,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, wrapping","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122495,"byte_end":122563,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/ the truncated bits to the end of the resulting integer.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122568,"byte_end":122627,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122632,"byte_end":122635,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122640,"byte_end":122654,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122659,"byte_end":122662,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122667,"byte_end":122674,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122679,"byte_end":122707,"line_start":115,"line_end":115,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122712,"byte_end":122715,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122720,"byte_end":122754,"line_start":117,"line_end":117,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF012u64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122759,"byte_end":122793,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122798,"byte_end":122801,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_left(12), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122806,"byte_end":122843,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122848,"byte_end":122855,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123279,"byte_end":123291,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, wrapping","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122903,"byte_end":122972,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/ the truncated bits to the beginning of the resulting integer.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":122977,"byte_end":123042,"line_start":125,"line_end":125,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123047,"byte_end":123050,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123055,"byte_end":123069,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123074,"byte_end":123077,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123082,"byte_end":123089,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123094,"byte_end":123122,"line_start":130,"line_end":130,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123127,"byte_end":123130,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123135,"byte_end":123169,"line_start":132,"line_end":132,"column_start":5,"column_end":39}},{"value":"/ let m = 0xDEF0123456789ABCu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123174,"byte_end":123208,"line_start":133,"line_end":133,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123213,"byte_end":123216,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_right(12), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123221,"byte_end":123259,"line_start":135,"line_end":135,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123264,"byte_end":123271,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123727,"byte_end":123737,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"pub fn signed_shl(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123320,"byte_end":123387,"line_start":139,"line_end":139,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123392,"byte_end":123432,"line_start":140,"line_end":140,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123437,"byte_end":123440,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shl`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123445,"byte_end":123492,"line_start":142,"line_end":142,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123497,"byte_end":123500,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123505,"byte_end":123519,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123524,"byte_end":123527,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123532,"byte_end":123539,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123544,"byte_end":123572,"line_start":147,"line_end":147,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123577,"byte_end":123580,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123585,"byte_end":123619,"line_start":149,"line_end":149,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000u64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123624,"byte_end":123658,"line_start":150,"line_end":150,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123663,"byte_end":123666,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shl(12), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123671,"byte_end":123707,"line_start":152,"line_end":152,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123712,"byte_end":123719,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124206,"byte_end":124216,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"pub fn signed_shr(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, copying","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123766,"byte_end":123834,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ the \"sign bit\" in the most significant bits even for unsigned types.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123839,"byte_end":123911,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123916,"byte_end":123919,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shr`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123924,"byte_end":123971,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123976,"byte_end":123979,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":123984,"byte_end":123998,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124003,"byte_end":124006,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124011,"byte_end":124018,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124023,"byte_end":124051,"line_start":164,"line_end":164,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124056,"byte_end":124059,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210u64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124064,"byte_end":124098,"line_start":166,"line_end":166,"column_start":5,"column_end":39}},{"value":"/ let m = 0xFFFFEDCBA9876543u64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124103,"byte_end":124137,"line_start":167,"line_end":167,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124142,"byte_end":124145,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shr(12), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124150,"byte_end":124186,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124191,"byte_end":124198,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124656,"byte_end":124668,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"pub fn unsigned_shl(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124245,"byte_end":124312,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124317,"byte_end":124357,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124362,"byte_end":124365,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shl`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124370,"byte_end":124419,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124424,"byte_end":124427,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124432,"byte_end":124446,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124451,"byte_end":124454,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124459,"byte_end":124466,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124471,"byte_end":124499,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124504,"byte_end":124507,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFi64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124512,"byte_end":124546,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000i64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124551,"byte_end":124585,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124590,"byte_end":124593,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shl(12), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124598,"byte_end":124636,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124641,"byte_end":124648,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125101,"byte_end":125113,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"pub fn unsigned_shr(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, filling","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124697,"byte_end":124765,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/ zeros in the most significant bits.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124770,"byte_end":124809,"line_start":191,"line_end":191,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124814,"byte_end":124817,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shr`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124822,"byte_end":124871,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124876,"byte_end":124879,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124884,"byte_end":124898,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124903,"byte_end":124906,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124911,"byte_end":124918,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124923,"byte_end":124951,"line_start":198,"line_end":198,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124956,"byte_end":124959,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let n = -8i8; // 0b11111000","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":124964,"byte_end":124995,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/ let m = 62i8; // 0b00111110","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125000,"byte_end":125031,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125036,"byte_end":125039,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shr(2), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125044,"byte_end":125081,"line_start":203,"line_end":203,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125086,"byte_end":125093,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125418,"byte_end":125428,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125142,"byte_end":125185,"line_start":207,"line_end":207,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125190,"byte_end":125193,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125198,"byte_end":125212,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125217,"byte_end":125220,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125225,"byte_end":125232,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125237,"byte_end":125265,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125270,"byte_end":125273,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125278,"byte_end":125312,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ let m = 0xEFCDAB8967452301u64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125317,"byte_end":125351,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125356,"byte_end":125359,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.swap_bytes(), m);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125364,"byte_end":125398,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125403,"byte_end":125410,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125924,"byte_end":125931,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from big endian to the target's endianness.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125449,"byte_end":125515,"line_start":221,"line_end":221,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125520,"byte_end":125523,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125528,"byte_end":125602,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125607,"byte_end":125610,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125615,"byte_end":125629,"line_start":225,"line_end":225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125634,"byte_end":125637,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125642,"byte_end":125649,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125654,"byte_end":125682,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125687,"byte_end":125690,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125695,"byte_end":125729,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125734,"byte_end":125737,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125742,"byte_end":125778,"line_start":232,"line_end":232,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(u64::from_be(n), n)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125783,"byte_end":125821,"line_start":233,"line_end":233,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125826,"byte_end":125838,"line_start":234,"line_end":234,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_be(n), n.swap_bytes())","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125843,"byte_end":125894,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125899,"byte_end":125904,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125909,"byte_end":125916,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126436,"byte_end":126443,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from little endian to the target's endianness.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":125955,"byte_end":126024,"line_start":240,"line_end":240,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126029,"byte_end":126032,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126037,"byte_end":126111,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126116,"byte_end":126119,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126124,"byte_end":126138,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126143,"byte_end":126146,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126151,"byte_end":126158,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126163,"byte_end":126191,"line_start":247,"line_end":247,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126196,"byte_end":126199,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126204,"byte_end":126238,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126243,"byte_end":126246,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126251,"byte_end":126290,"line_start":251,"line_end":251,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(u64::from_le(n), n)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126295,"byte_end":126333,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126338,"byte_end":126350,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_le(n), n.swap_bytes())","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126355,"byte_end":126406,"line_start":254,"line_end":254,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126411,"byte_end":126416,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126421,"byte_end":126428,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126926,"byte_end":126931,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to big endian from the target's endianness.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126467,"byte_end":126529,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126534,"byte_end":126537,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126542,"byte_end":126616,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126621,"byte_end":126624,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126629,"byte_end":126643,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126648,"byte_end":126651,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126656,"byte_end":126663,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126668,"byte_end":126696,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126701,"byte_end":126704,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126709,"byte_end":126743,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126748,"byte_end":126751,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126756,"byte_end":126792,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(n.to_be(), n)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126797,"byte_end":126829,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126834,"byte_end":126846,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_be(), n.swap_bytes())","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126851,"byte_end":126896,"line_start":273,"line_end":273,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126901,"byte_end":126906,"line_start":274,"line_end":274,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126911,"byte_end":126918,"line_start":275,"line_end":275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127417,"byte_end":127422,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to little endian from the target's endianness.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":126952,"byte_end":127017,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127022,"byte_end":127025,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127030,"byte_end":127104,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127109,"byte_end":127112,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127117,"byte_end":127131,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127136,"byte_end":127139,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127144,"byte_end":127151,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127156,"byte_end":127184,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127189,"byte_end":127192,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127197,"byte_end":127231,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127236,"byte_end":127239,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127244,"byte_end":127283,"line_start":289,"line_end":289,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(n.to_le(), n)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127288,"byte_end":127320,"line_start":290,"line_end":290,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127325,"byte_end":127337,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_le(), n.swap_bytes())","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127342,"byte_end":127387,"line_start":292,"line_end":292,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127392,"byte_end":127397,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127402,"byte_end":127409,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127660,"byte_end":127663,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127443,"byte_end":127515,"line_start":297,"line_end":297,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127520,"byte_end":127523,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127528,"byte_end":127542,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127547,"byte_end":127550,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127555,"byte_end":127562,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127567,"byte_end":127595,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127600,"byte_end":127603,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2i32.pow(4), 16);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127608,"byte_end":127640,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":127645,"byte_end":127652,"line_start":305,"line_end":305,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":306},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":335},{"krate":0,"index":353},{"krate":0,"index":365},{"krate":0,"index":392},{"krate":0,"index":408}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2252},{"krate":0,"index":319},{"krate":0,"index":2254},{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":2276},{"krate":0,"index":321},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":323},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2324},{"krate":0,"index":325},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":328},{"krate":0,"index":2350},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":330},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2384},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2390},{"krate":0,"index":2392},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":333},{"krate":0,"index":2398},{"krate":0,"index":2400},{"krate":0,"index":2402},{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2412},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":2418},{"krate":0,"index":2420}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":316},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130464,"byte_end":130474,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":317}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that returns `None` instead of wrapping around on","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130368,"byte_end":130439,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130440,"byte_end":130453,"line_start":4,"line_end":4,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130616,"byte_end":130627,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"pub fn checked_add(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[{"value":"/ Adds two numbers, checking for overflow. If overflow happens, `None` is","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130515,"byte_end":130590,"line_start":6,"line_end":6,"column_start":5,"column_end":80}},{"value":"/ returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130595,"byte_end":130608,"line_start":7,"line_end":7,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":319},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131605,"byte_end":131615,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":320}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that returns `None` instead of wrapping around on underflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131509,"byte_end":131594,"line_start":38,"line_end":38,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131764,"byte_end":131775,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"pub fn checked_sub(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":319},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[{"value":"/ Subtracts two numbers, checking for underflow. If underflow happens,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131656,"byte_end":131728,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131733,"byte_end":131756,"line_start":41,"line_end":41,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":321},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132508,"byte_end":132518,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":322}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that returns `None` instead of wrapping around on underflow or","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132393,"byte_end":132483,"line_start":61,"line_end":61,"column_start":1,"column_end":91}},{"value":"/ overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132484,"byte_end":132497,"line_start":62,"line_end":62,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132692,"byte_end":132703,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"pub fn checked_mul(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Multiplies two numbers, checking for underflow or overflow. If underflow","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132559,"byte_end":132635,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ or overflow happens, `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132640,"byte_end":132684,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":323},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133476,"byte_end":133486,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":324}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs division that returns `None` instead of panicking on division by zero and instead of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133321,"byte_end":133418,"line_start":85,"line_end":85,"column_start":1,"column_end":98}},{"value":"/ wrapping around on underflow and overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133419,"byte_end":133465,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133666,"byte_end":133677,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"pub fn checked_div(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Divides two numbers, checking for underflow, overflow and division by","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133527,"byte_end":133600,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ zero. If any of that happens, `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133605,"byte_end":133658,"line_start":89,"line_end":89,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":325},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134463,"byte_end":134473,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":326}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs an integral remainder that returns `None` instead of panicking on division by zero and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134295,"byte_end":134394,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ instead of wrapping around on underflow and overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134395,"byte_end":134452,"line_start":110,"line_end":110,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135267,"byte_end":135278,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"pub fn checked_rem(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[{"value":"/ Finds the remainder of dividing two numbers, checking for underflow, overflow and division","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134514,"byte_end":134608,"line_start":112,"line_end":112,"column_start":5,"column_end":99}},{"value":"/ by zero. If any of that happens, `None` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134613,"byte_end":134669,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134674,"byte_end":134677,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134682,"byte_end":134696,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134701,"byte_end":134704,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134709,"byte_end":134716,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedRem;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134721,"byte_end":134752,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134757,"byte_end":134779,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134784,"byte_end":134787,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &7), Some(3));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134792,"byte_end":134850,"line_start":121,"line_end":121,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &-7), Some(3));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134855,"byte_end":134914,"line_start":122,"line_end":122,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &7), Some(-3));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134919,"byte_end":134979,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &-7), Some(-3));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134984,"byte_end":135045,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135050,"byte_end":135053,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &0), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135058,"byte_end":135113,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135118,"byte_end":135121,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &1), Some(0));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135126,"byte_end":135185,"line_start":128,"line_end":128,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &-1), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135190,"byte_end":135247,"line_start":129,"line_end":129,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":135252,"byte_end":135259,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":328},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136242,"byte_end":136252,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":329}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[{"value":"/ Performs negation that returns `None` if the result can't be represented.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136154,"byte_end":136231,"line_start":161,"line_end":161,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136902,"byte_end":136913,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"pub fn checked_neg(&Self) -> Option<Self>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[{"value":"/ Negates a number, returning `None` for results that can't be represented, like signed `MIN`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136266,"byte_end":136361,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ values that can't be positive, or non-zero unsigned values that can't be negative.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136366,"byte_end":136452,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136457,"byte_end":136460,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136465,"byte_end":136479,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136484,"byte_end":136487,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136492,"byte_end":136499,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedNeg;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136504,"byte_end":136535,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136540,"byte_end":136562,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136567,"byte_end":136570,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_i32), Some(-1));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136575,"byte_end":136633,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&-1_i32), Some(1));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136638,"byte_end":136696,"line_start":173,"line_end":173,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&MIN), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136701,"byte_end":136753,"line_start":174,"line_end":174,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136758,"byte_end":136761,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&0_u32), Some(0));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136766,"byte_end":136823,"line_start":176,"line_end":176,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_u32), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136828,"byte_end":136882,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136887,"byte_end":136894,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":330},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137691,"byte_end":137701,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":331}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that returns `None` on shifts larger than","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137593,"byte_end":137660,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ the type width.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137661,"byte_end":137680,"line_start":199,"line_end":199,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":138260,"byte_end":138271,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"pub fn checked_shl(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137741,"byte_end":137805,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137810,"byte_end":137879,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137884,"byte_end":137887,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137892,"byte_end":137899,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShl;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137904,"byte_end":137935,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137940,"byte_end":137943,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137948,"byte_end":137972,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137977,"byte_end":137980,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137985,"byte_end":138047,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":138052,"byte_end":138114,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":138119,"byte_end":138181,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 16), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":138186,"byte_end":138240,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":138245,"byte_end":138252,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":333},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139333,"byte_end":139343,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":334}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that returns `None` on shifts larger than","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139234,"byte_end":139302,"line_start":244,"line_end":244,"column_start":1,"column_end":69}},{"value":"/ the type width.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139303,"byte_end":139322,"line_start":245,"line_end":245,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139903,"byte_end":139914,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"pub fn checked_shr(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139383,"byte_end":139448,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139453,"byte_end":139522,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139527,"byte_end":139530,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139535,"byte_end":139542,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShr;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139547,"byte_end":139578,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139583,"byte_end":139586,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139591,"byte_end":139615,"line_start":253,"line_end":253,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139620,"byte_end":139623,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139628,"byte_end":139690,"line_start":255,"line_end":255,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139695,"byte_end":139757,"line_start":256,"line_end":256,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139762,"byte_end":139824,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 16), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139829,"byte_end":139883,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139888,"byte_end":139895,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":335},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":349}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":336},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140703,"byte_end":140706,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[{"value":"/ Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140604,"byte_end":140692,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":337},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140766,"byte_end":140772,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140713,"byte_end":140756,"line_start":3,"line_end":3,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":141051,"byte_end":141054,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"pub fn inv(Self) -> Self::Output","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative inverse of `self`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140779,"byte_end":140828,"line_start":6,"line_end":6,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140833,"byte_end":140836,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140841,"byte_end":140855,"line_start":8,"line_end":8,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140860,"byte_end":140863,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140868,"byte_end":140875,"line_start":10,"line_end":10,"column_start":5,"column_end":12}},{"value":"/ use std::f64::INFINITY;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140880,"byte_end":140907,"line_start":11,"line_end":11,"column_start":5,"column_end":32}},{"value":"/ use num_traits::Inv;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140912,"byte_end":140936,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140941,"byte_end":140944,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.0.inv() * 7.0, 1.0);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140949,"byte_end":140986,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((-0.0).inv(), -INFINITY);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":140991,"byte_end":141031,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/inv.rs","byte_start":141036,"byte_end":141043,"line_start":16,"line_end":16,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":353},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":359},{"krate":0,"index":2422},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458},{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2480}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":354},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142179,"byte_end":142185,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[{"value":"/ Fused multiply-add. Computes `(self * a) + b` with only one rounding","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141536,"byte_end":141608,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/ error, yielding a more accurate result than an unfused multiply-add.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141609,"byte_end":141681,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141682,"byte_end":141685,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Using `mul_add` can be more performant than an unfused multiply-add if","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141686,"byte_end":141760,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ the target architecture has a dedicated `fma` CPU instruction.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141761,"byte_end":141827,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141828,"byte_end":141831,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Note that `A` and `B` are `Self` by default, but this is not mandatory.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141832,"byte_end":141907,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141908,"byte_end":141911,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141912,"byte_end":141925,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141926,"byte_end":141929,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141930,"byte_end":141937,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use std::f32;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141938,"byte_end":141955,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141956,"byte_end":141959,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let m = 10.0_f32;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141960,"byte_end":141981,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ let x = 4.0_f32;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":141982,"byte_end":142002,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ let b = 60.0_f32;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142003,"byte_end":142024,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142025,"byte_end":142028,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // 100.0","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142029,"byte_end":142041,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142042,"byte_end":142103,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142104,"byte_end":142107,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ assert!(abs_difference <= 100.0 * f32::EPSILON);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142108,"byte_end":142160,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142161,"byte_end":142168,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":357},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142283,"byte_end":142289,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":354},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[{"value":"/ The resulting type after applying the fused multiply-add.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142212,"byte_end":142273,"line_start":24,"line_end":24,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142350,"byte_end":142357,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"pub fn mul_add(Self, A, B) -> Self::Output","parent":{"krate":0,"index":354},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142296,"byte_end":142342,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":359},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142455,"byte_end":142467,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":362}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[{"value":"/ The fused multiply-add assignment operation.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142396,"byte_end":142444,"line_start":31,"line_end":31,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142548,"byte_end":142562,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"pub fn mul_add_assign(&mut Self, A, B)","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mul_add.rs","byte_start":142494,"byte_end":142540,"line_start":33,"line_end":33,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":365},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"overflowing","qualname":"::ops::overflowing","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2486},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":388},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":390},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":386},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":145937,"byte_end":145951,"line_start":19,"line_end":19,"column_start":11,"column_end":25},"name":"OverflowingAdd","qualname":"::ops::overflowing::OverflowingAdd","value":"OverflowingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":387}],"decl_id":null,"docs":" Performs addition with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition with a flag for overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":145879,"byte_end":145926,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":146185,"byte_end":146200,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"overflowing_add","qualname":"::ops::overflowing::OverflowingAdd::overflowing_add","value":"pub fn overflowing_add(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":386},"children":[],"decl_id":null,"docs":" Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":145992,"byte_end":146098,"line_start":20,"line_end":20,"column_start":5,"column_end":111}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":146103,"byte_end":146177,"line_start":21,"line_end":21,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":388},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147024,"byte_end":147038,"line_start":42,"line_end":42,"column_start":11,"column_end":25},"name":"OverflowingSub","qualname":"::ops::overflowing::OverflowingSub","value":"OverflowingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":389}],"decl_id":null,"docs":" Performs substraction with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs substraction with a flag for overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":146962,"byte_end":147013,"line_start":41,"line_end":41,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147279,"byte_end":147294,"line_start":45,"line_end":45,"column_start":8,"column_end":23},"name":"overflowing_sub","qualname":"::ops::overflowing::OverflowingSub::overflowing_sub","value":"pub fn overflowing_sub(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":388},"children":[],"decl_id":null,"docs":" Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147079,"byte_end":147192,"line_start":43,"line_end":43,"column_start":5,"column_end":118}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147197,"byte_end":147271,"line_start":44,"line_end":44,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":390},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148120,"byte_end":148134,"line_start":65,"line_end":65,"column_start":11,"column_end":25},"name":"OverflowingMul","qualname":"::ops::overflowing::OverflowingMul","value":"OverflowingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":391}],"decl_id":null,"docs":" Performs multiplication with a flag for overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication with a flag for overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148056,"byte_end":148109,"line_start":64,"line_end":64,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148372,"byte_end":148387,"line_start":68,"line_end":68,"column_start":8,"column_end":23},"name":"overflowing_mul","qualname":"::ops::overflowing::OverflowingMul::overflowing_mul","value":"pub fn overflowing_mul(&Self, &Self) -> (Self, bool)","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.\n If an overflow would have occurred then the wrapped value is returned.\n","sig":null,"attributes":[{"value":"/ Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148175,"byte_end":148285,"line_start":66,"line_end":66,"column_start":5,"column_end":115}},{"value":"/ If an overflow would have occurred then the wrapped value is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148290,"byte_end":148364,"line_start":67,"line_end":67,"column_start":5,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":392},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":2554},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2563},{"krate":0,"index":2566},{"krate":0,"index":2569},{"krate":0,"index":2572},{"krate":0,"index":2575},{"krate":0,"index":2578},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":402},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2606},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":404},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":406},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2660}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":397},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150029,"byte_end":150039,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"decl_id":null,"docs":" Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and\n `SaturatingMul` instead.\n","sig":null,"attributes":[{"value":"/ Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":149905,"byte_end":149989,"line_start":3,"line_end":3,"column_start":1,"column_end":85}},{"value":"/ `SaturatingMul` instead.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":149990,"byte_end":150018,"line_start":4,"line_end":4,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150165,"byte_end":150179,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition operator.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150046,"byte_end":150079,"line_start":6,"line_end":6,"column_start":5,"column_end":38}},{"value":"/ Returns a+b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150084,"byte_end":150157,"line_start":7,"line_end":7,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150331,"byte_end":150345,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction operator.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150209,"byte_end":150245,"line_start":10,"line_end":10,"column_start":5,"column_end":41}},{"value":"/ Returns a-b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":150250,"byte_end":150323,"line_start":11,"line_end":11,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":402},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151306,"byte_end":151319,"line_start":47,"line_end":47,"column_start":11,"column_end":24},"name":"SaturatingAdd","qualname":"::ops::saturating::SaturatingAdd","value":"SaturatingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":403}],"decl_id":null,"docs":" Performs addition that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs addition that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151213,"byte_end":151295,"line_start":46,"line_end":46,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151486,"byte_end":151500,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::SaturatingAdd::saturating_add","value":"pub fn saturating_add(&Self, &Self) -> Self","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":" Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151360,"byte_end":151460,"line_start":48,"line_end":48,"column_start":5,"column_end":105}},{"value":"/ the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151465,"byte_end":151478,"line_start":49,"line_end":49,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152314,"byte_end":152327,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SaturatingSub","qualname":"::ops::saturating::SaturatingSub","value":"SaturatingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" Performs subtraction that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152218,"byte_end":152303,"line_start":69,"line_end":69,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152497,"byte_end":152511,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::SaturatingSub::saturating_sub","value":"pub fn saturating_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152368,"byte_end":152471,"line_start":71,"line_end":71,"column_start":5,"column_end":108}},{"value":"/ the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152476,"byte_end":152489,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":406},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153328,"byte_end":153341,"line_start":93,"line_end":93,"column_start":11,"column_end":24},"name":"SaturatingMul","qualname":"::ops::saturating::SaturatingMul","value":"SaturatingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":407}],"decl_id":null,"docs":" Performs multiplication that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153229,"byte_end":153317,"line_start":92,"line_end":92,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153514,"byte_end":153528,"line_start":96,"line_end":96,"column_start":8,"column_end":22},"name":"saturating_mul","qualname":"::ops::saturating::SaturatingMul::saturating_mul","value":"pub fn saturating_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153382,"byte_end":153488,"line_start":94,"line_end":94,"column_start":5,"column_end":111}},{"value":"/ the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153493,"byte_end":153506,"line_start":95,"line_end":95,"column_start":5,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":408},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":4335},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684},{"krate":0,"index":420},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":422},{"krate":0,"index":2710},{"krate":0,"index":2712},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":425},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":428},{"krate":0,"index":2758},{"krate":0,"index":2760},{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":430},{"krate":0,"index":2782},{"krate":0,"index":2784},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":418},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155736,"byte_end":155747,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":419}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that wraps around on overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155673,"byte_end":155725,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155906,"byte_end":155918,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"pub fn wrapping_add(&Self, &Self) -> Self","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155788,"byte_end":155880,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/ the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155885,"byte_end":155898,"line_start":26,"line_end":26,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":420},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156630,"byte_end":156641,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":421}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that wraps around on overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156564,"byte_end":156619,"line_start":46,"line_end":46,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156803,"byte_end":156815,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"pub fn wrapping_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156682,"byte_end":156774,"line_start":48,"line_end":48,"column_start":5,"column_end":97}},{"value":"/ of the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156779,"byte_end":156795,"line_start":49,"line_end":49,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":422},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157530,"byte_end":157541,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":423}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that wraps around on overflow.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157461,"byte_end":157519,"line_start":69,"line_end":69,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157706,"byte_end":157718,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"pub fn wrapping_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157582,"byte_end":157677,"line_start":71,"line_end":71,"column_start":5,"column_end":100}},{"value":"/ of the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157682,"byte_end":157698,"line_start":72,"line_end":72,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":425},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158670,"byte_end":158681,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingNeg","qualname":"::ops::wrapping::WrappingNeg","value":"WrappingNeg: Sized","parent":null,"children":[{"krate":0,"index":426}],"decl_id":null,"docs":" Performs a negation that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a negation that does not panic.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158615,"byte_end":158659,"line_start":103,"line_end":103,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159467,"byte_end":159479,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"wrapping_neg","qualname":"::ops::wrapping::WrappingNeg::wrapping_neg","value":"pub fn wrapping_neg(&Self) -> Self","parent":{"krate":0,"index":425},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`,\n wrapping around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) negation. Computes `-self`,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158695,"byte_end":158745,"line_start":105,"line_end":105,"column_start":5,"column_end":55}},{"value":"/ wrapping around at the boundary of the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158750,"byte_end":158798,"line_start":106,"line_end":106,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158803,"byte_end":158806,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Since unsigned types do not have negative equivalents","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158811,"byte_end":158868,"line_start":108,"line_end":108,"column_start":5,"column_end":62}},{"value":"/ all applications of this function will wrap (except for `-0`).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158873,"byte_end":158939,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ For values smaller than the corresponding signed type's maximum","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158944,"byte_end":159011,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ the result is the same as casting the corresponding signed value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159016,"byte_end":159085,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159090,"byte_end":159163,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ `MAX` is the corresponding signed type's maximum.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159168,"byte_end":159221,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159226,"byte_end":159229,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159234,"byte_end":159241,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingNeg;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159246,"byte_end":159278,"line_start":116,"line_end":116,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159283,"byte_end":159286,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(100i8.wrapping_neg(), -100);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159291,"byte_end":159334,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/ assert_eq!((-100i8).wrapping_neg(), 100);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159339,"byte_end":159384,"line_start":119,"line_end":119,"column_start":5,"column_end":50}},{"value":"/ assert_eq!((-128i8).wrapping_neg(), -128); // wrapped!","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159389,"byte_end":159447,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":159452,"byte_end":159459,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":428},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160509,"byte_end":160520,"line_start":152,"line_end":152,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":429}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that does not panic.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160452,"byte_end":160498,"line_start":151,"line_end":151,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161127,"byte_end":161139,"line_start":167,"line_end":167,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"pub fn wrapping_shl(&Self, u32) -> Self","parent":{"krate":0,"index":428},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160562,"byte_end":160624,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160629,"byte_end":160693,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160698,"byte_end":160753,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160758,"byte_end":160761,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160766,"byte_end":160773,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShl;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160778,"byte_end":160810,"line_start":158,"line_end":158,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160815,"byte_end":160818,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160823,"byte_end":160847,"line_start":160,"line_end":160,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160852,"byte_end":160855,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 0),  0x0001);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160860,"byte_end":160918,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 1),  0x0002);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160923,"byte_end":160981,"line_start":163,"line_end":163,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 15), 0x8000);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160986,"byte_end":161044,"line_start":164,"line_end":164,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 16), 0x0001);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161049,"byte_end":161107,"line_start":165,"line_end":165,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161112,"byte_end":161119,"line_start":166,"line_end":166,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161915,"byte_end":161926,"line_start":187,"line_end":187,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":431}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that does not panic.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161857,"byte_end":161904,"line_start":186,"line_end":186,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162534,"byte_end":162546,"line_start":202,"line_end":202,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"pub fn wrapping_shr(&Self, u32) -> Self","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161968,"byte_end":162031,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162036,"byte_end":162100,"line_start":189,"line_end":189,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162105,"byte_end":162160,"line_start":190,"line_end":190,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162165,"byte_end":162168,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162173,"byte_end":162180,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShr;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162185,"byte_end":162217,"line_start":193,"line_end":193,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162222,"byte_end":162225,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162230,"byte_end":162254,"line_start":195,"line_end":195,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162259,"byte_end":162262,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 0),  0x8000);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162267,"byte_end":162325,"line_start":197,"line_end":197,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 1),  0x4000);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162330,"byte_end":162388,"line_start":198,"line_end":198,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 15), 0x0001);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162393,"byte_end":162451,"line_start":199,"line_end":199,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 16), 0x8000);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162456,"byte_end":162514,"line_start":200,"line_end":200,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":162519,"byte_end":162526,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":450},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":4349},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":2806},{"krate":0,"index":2809},{"krate":0,"index":2813},{"krate":0,"index":2817},{"krate":0,"index":2822},{"krate":0,"index":2825},{"krate":0,"index":2829},{"krate":0,"index":2833},{"krate":0,"index":2838},{"krate":0,"index":2841},{"krate":0,"index":2845},{"krate":0,"index":2849},{"krate":0,"index":2854},{"krate":0,"index":2857},{"krate":0,"index":2861},{"krate":0,"index":2865},{"krate":0,"index":2870},{"krate":0,"index":2873},{"krate":0,"index":2877},{"krate":0,"index":2881},{"krate":0,"index":2886},{"krate":0,"index":2889},{"krate":0,"index":2893},{"krate":0,"index":2897},{"krate":0,"index":2902},{"krate":0,"index":2905},{"krate":0,"index":2909},{"krate":0,"index":2913},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2925},{"krate":0,"index":2929},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2941},{"krate":0,"index":2945},{"krate":0,"index":2950},{"krate":0,"index":2953},{"krate":0,"index":2957},{"krate":0,"index":2961},{"krate":0,"index":2966},{"krate":0,"index":2969},{"krate":0,"index":2973},{"krate":0,"index":2977},{"krate":0,"index":2982},{"krate":0,"index":2985},{"krate":0,"index":2989},{"krate":0,"index":2993},{"krate":0,"index":2998},{"krate":0,"index":3001},{"krate":0,"index":3005},{"krate":0,"index":3009},{"krate":0,"index":3014},{"krate":0,"index":3017},{"krate":0,"index":3021},{"krate":0,"index":3025},{"krate":0,"index":3030},{"krate":0,"index":3033},{"krate":0,"index":3037},{"krate":0,"index":3041},{"krate":0,"index":3046},{"krate":0,"index":3049},{"krate":0,"index":3053},{"krate":0,"index":3057},{"krate":0,"index":3062},{"krate":0,"index":3065},{"krate":0,"index":3069},{"krate":0,"index":3073},{"krate":0,"index":3078},{"krate":0,"index":3081},{"krate":0,"index":3085},{"krate":0,"index":3089},{"krate":0,"index":3094},{"krate":0,"index":3097},{"krate":0,"index":3101},{"krate":0,"index":3105},{"krate":0,"index":3110},{"krate":0,"index":3113},{"krate":0,"index":3117},{"krate":0,"index":3121},{"krate":0,"index":3126},{"krate":0,"index":3129},{"krate":0,"index":3133},{"krate":0,"index":3137},{"krate":0,"index":3142},{"krate":0,"index":3145},{"krate":0,"index":3149},{"krate":0,"index":3153},{"krate":0,"index":3158},{"krate":0,"index":3161},{"krate":0,"index":3165},{"krate":0,"index":3169},{"krate":0,"index":3174},{"krate":0,"index":3177},{"krate":0,"index":3181},{"krate":0,"index":3185},{"krate":0,"index":3190},{"krate":0,"index":3193},{"krate":0,"index":3197},{"krate":0,"index":3201},{"krate":0,"index":3206},{"krate":0,"index":3209},{"krate":0,"index":3213},{"krate":0,"index":3217},{"krate":0,"index":3222},{"krate":0,"index":3225},{"krate":0,"index":3229},{"krate":0,"index":3233},{"krate":0,"index":3238},{"krate":0,"index":3241},{"krate":0,"index":3245},{"krate":0,"index":3249},{"krate":0,"index":3254},{"krate":0,"index":3257},{"krate":0,"index":3261},{"krate":0,"index":3265},{"krate":0,"index":3270},{"krate":0,"index":3273},{"krate":0,"index":3277},{"krate":0,"index":3281},{"krate":0,"index":3286},{"krate":0,"index":3289},{"krate":0,"index":3293},{"krate":0,"index":3297},{"krate":0,"index":3302},{"krate":0,"index":3305},{"krate":0,"index":3309},{"krate":0,"index":3313},{"krate":0,"index":3318},{"krate":0,"index":3321},{"krate":0,"index":3325},{"krate":0,"index":3329},{"krate":0,"index":3334},{"krate":0,"index":3337},{"krate":0,"index":3341},{"krate":0,"index":3345},{"krate":0,"index":3350},{"krate":0,"index":3353},{"krate":0,"index":3357},{"krate":0,"index":3361},{"krate":0,"index":3366},{"krate":0,"index":3369},{"krate":0,"index":3373},{"krate":0,"index":3377},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3389},{"krate":0,"index":3393},{"krate":0,"index":3398},{"krate":0,"index":3401},{"krate":0,"index":3405},{"krate":0,"index":3409},{"krate":0,"index":3414},{"krate":0,"index":3417},{"krate":0,"index":3421},{"krate":0,"index":3425},{"krate":0,"index":3430},{"krate":0,"index":3433},{"krate":0,"index":3437},{"krate":0,"index":3441},{"krate":0,"index":3446},{"krate":0,"index":3449},{"krate":0,"index":3453},{"krate":0,"index":3457},{"krate":0,"index":3462},{"krate":0,"index":3465},{"krate":0,"index":3469},{"krate":0,"index":3473},{"krate":0,"index":3478},{"krate":0,"index":3481},{"krate":0,"index":3485},{"krate":0,"index":3489},{"krate":0,"index":3494},{"krate":0,"index":3497},{"krate":0,"index":3501},{"krate":0,"index":3505},{"krate":0,"index":3510},{"krate":0,"index":3513},{"krate":0,"index":3517},{"krate":0,"index":3521},{"krate":0,"index":3526},{"krate":0,"index":3529},{"krate":0,"index":3533},{"krate":0,"index":3537},{"krate":0,"index":3542},{"krate":0,"index":3545},{"krate":0,"index":3549},{"krate":0,"index":3553},{"krate":0,"index":3558},{"krate":0,"index":3561},{"krate":0,"index":3565},{"krate":0,"index":3569},{"krate":0,"index":3574},{"krate":0,"index":3577},{"krate":0,"index":3581},{"krate":0,"index":3585},{"krate":0,"index":3590},{"krate":0,"index":3593},{"krate":0,"index":3597},{"krate":0,"index":3601},{"krate":0,"index":3606},{"krate":0,"index":3609},{"krate":0,"index":3613},{"krate":0,"index":3617},{"krate":0,"index":3622},{"krate":0,"index":3625},{"krate":0,"index":3629},{"krate":0,"index":3633},{"krate":0,"index":3638},{"krate":0,"index":3641},{"krate":0,"index":3645},{"krate":0,"index":3649},{"krate":0,"index":3654},{"krate":0,"index":3657},{"krate":0,"index":3661},{"krate":0,"index":3665},{"krate":0,"index":3670},{"krate":0,"index":3673},{"krate":0,"index":3677},{"krate":0,"index":3681},{"krate":0,"index":3686},{"krate":0,"index":3689},{"krate":0,"index":3693},{"krate":0,"index":3697},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3709},{"krate":0,"index":3713},{"krate":0,"index":3718},{"krate":0,"index":3721},{"krate":0,"index":3725},{"krate":0,"index":3729},{"krate":0,"index":3734},{"krate":0,"index":3737},{"krate":0,"index":3741},{"krate":0,"index":3745},{"krate":0,"index":3750},{"krate":0,"index":3753},{"krate":0,"index":3757},{"krate":0,"index":3761},{"krate":0,"index":3766},{"krate":0,"index":3769},{"krate":0,"index":3773},{"krate":0,"index":3777},{"krate":0,"index":3782},{"krate":0,"index":3785},{"krate":0,"index":3789},{"krate":0,"index":3793},{"krate":0,"index":3798},{"krate":0,"index":3801},{"krate":0,"index":3805},{"krate":0,"index":3809},{"krate":0,"index":3814},{"krate":0,"index":3817},{"krate":0,"index":3821},{"krate":0,"index":3825},{"krate":0,"index":3830},{"krate":0,"index":3833},{"krate":0,"index":3837},{"krate":0,"index":3841},{"krate":0,"index":3846},{"krate":0,"index":3849},{"krate":0,"index":3853},{"krate":0,"index":3857},{"krate":0,"index":3862},{"krate":0,"index":3865},{"krate":0,"index":3869},{"krate":0,"index":3873},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3885},{"krate":0,"index":3889},{"krate":0,"index":3894},{"krate":0,"index":3897},{"krate":0,"index":3901},{"krate":0,"index":3905},{"krate":0,"index":3910},{"krate":0,"index":3913},{"krate":0,"index":3917},{"krate":0,"index":3921},{"krate":0,"index":3926},{"krate":0,"index":3929},{"krate":0,"index":3933},{"krate":0,"index":3937},{"krate":0,"index":3942},{"krate":0,"index":3945},{"krate":0,"index":3949},{"krate":0,"index":3953},{"krate":0,"index":461},{"krate":0,"index":463}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166766,"byte_end":166769,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[{"value":"/ Binary operator for raising a value to a power.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166704,"byte_end":166755,"line_start":5,"line_end":5,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166834,"byte_end":166840,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166781,"byte_end":166824,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":167029,"byte_end":167032,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"pub fn pow(Self, RHS) -> Self::Output","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[{"value":"/ Returns `self` to the power `rhs`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166847,"byte_end":166885,"line_start":10,"line_end":10,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166890,"byte_end":166893,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166898,"byte_end":166912,"line_start":12,"line_end":12,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166917,"byte_end":166920,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166925,"byte_end":166932,"line_start":14,"line_end":14,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Pow;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166937,"byte_end":166961,"line_start":15,"line_end":15,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Pow::pow(10u32, 2u32), 100);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":166966,"byte_end":167009,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":167014,"byte_end":167021,"line_start":17,"line_end":17,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":461},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171859,"byte_end":171862,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"pub fn pow<T: Clone + One + Mul<T, Output = T>>(T, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, using exponentiation by squaring.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171475,"byte_end":171548,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171549,"byte_end":171552,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`pow(0, 0)`) returns `1`. Mathematically this is undefined.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171553,"byte_end":171634,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171635,"byte_end":171638,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171639,"byte_end":171652,"line_start":179,"line_end":179,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171653,"byte_end":171656,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171657,"byte_end":171668,"line_start":181,"line_end":181,"column_start":1,"column_end":12}},{"value":"/ use num_traits::pow;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171669,"byte_end":171693,"line_start":182,"line_end":182,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171694,"byte_end":171697,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pow(2i8, 4), 16);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171698,"byte_end":171730,"line_start":184,"line_end":184,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(pow(6u8, 3), 216);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171731,"byte_end":171764,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(pow(0u8, 0), 1); // Be aware if this case affects you","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171765,"byte_end":171833,"line_start":186,"line_end":186,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171834,"byte_end":171841,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":171842,"byte_end":171851,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":463},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172868,"byte_end":172879,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"pub fn checked_pow<T: Clone + One + CheckedMul>(T, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, returning `None` if an overflow occurred.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172316,"byte_end":172397,"line_start":213,"line_end":213,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172398,"byte_end":172401,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`checked_pow(0, 0)`) returns `Some(1)`. Mathematically this is undefined.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172402,"byte_end":172497,"line_start":215,"line_end":215,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172498,"byte_end":172501,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Otherwise same as the `pow` function.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172502,"byte_end":172543,"line_start":217,"line_end":217,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172544,"byte_end":172547,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172548,"byte_end":172561,"line_start":219,"line_end":219,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172562,"byte_end":172565,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172566,"byte_end":172577,"line_start":221,"line_end":221,"column_start":1,"column_end":12}},{"value":"/ use num_traits::checked_pow;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172578,"byte_end":172610,"line_start":222,"line_end":222,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172611,"byte_end":172614,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(checked_pow(2i8, 4), Some(16));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172615,"byte_end":172661,"line_start":224,"line_end":224,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(checked_pow(7i8, 8), None);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172662,"byte_end":172704,"line_start":225,"line_end":225,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(checked_pow(7u32, 8), Some(5_764_801));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172705,"byte_end":172759,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(checked_pow(0u32, 0), Some(1)); // Be aware if this case affect you","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172760,"byte_end":172842,"line_start":227,"line_end":227,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172843,"byte_end":172850,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/pow.rs","byte_start":172851,"byte_end":172860,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":466},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":4357},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":3958},{"krate":0,"index":3964},{"krate":0,"index":3970},{"krate":0,"index":3976},{"krate":0,"index":3982},{"krate":0,"index":3988},{"krate":0,"index":478},{"krate":0,"index":3994},{"krate":0,"index":4000},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010},{"krate":0,"index":4011},{"krate":0,"index":494}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195896,"byte_end":195902,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[{"value":"/ Useful functions for signed numbers (i.e. numbers that can be negative).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195809,"byte_end":195885,"line_start":7,"line_end":7,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196155,"byte_end":196158,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"pub fn abs(&Self) -> Self","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195943,"byte_end":195975,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195980,"byte_end":195983,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195988,"byte_end":196059,"line_start":11,"line_end":11,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196064,"byte_end":196067,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196072,"byte_end":196147,"line_start":13,"line_end":13,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196383,"byte_end":196390,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"pub fn abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196180,"byte_end":196223,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196228,"byte_end":196231,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Returns `zero` if the number is less than or equal to `other`, otherwise the difference","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196236,"byte_end":196327,"line_start":18,"line_end":18,"column_start":5,"column_end":96}},{"value":"/ between `self` and `other` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196332,"byte_end":196375,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196848,"byte_end":196854,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"pub fn signum(&Self) -> Self","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196426,"byte_end":196461,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196466,"byte_end":196469,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196474,"byte_end":196498,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196503,"byte_end":196506,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196511,"byte_end":196570,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196575,"byte_end":196639,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196644,"byte_end":196678,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196683,"byte_end":196686,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For signed integers:","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196691,"byte_end":196715,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196720,"byte_end":196723,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196728,"byte_end":196759,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196764,"byte_end":196799,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196804,"byte_end":196840,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196971,"byte_end":196982,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"pub fn is_positive(&Self) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is positive and false if the number is zero or negative.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":196876,"byte_end":196963,"line_start":37,"line_end":37,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":197099,"byte_end":197110,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is negative and false if the number is zero or positive.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":197004,"byte_end":197091,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200304,"byte_end":200307,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"pub fn abs<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200091,"byte_end":200123,"line_start":159,"line_end":159,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200124,"byte_end":200127,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200128,"byte_end":200198,"line_start":161,"line_end":161,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200199,"byte_end":200202,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200203,"byte_end":200278,"line_start":163,"line_end":163,"column_start":1,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200279,"byte_end":200296,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200544,"byte_end":200551,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"pub fn abs_sub<T: Signed>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200355,"byte_end":200398,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200399,"byte_end":200402,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Returns zero if `x` is less than or equal to `y`, otherwise the difference","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200403,"byte_end":200481,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ between `x` and `y` is returned.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200482,"byte_end":200518,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200519,"byte_end":200536,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200995,"byte_end":201001,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"pub fn signum<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200603,"byte_end":200638,"line_start":178,"line_end":178,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200639,"byte_end":200642,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200643,"byte_end":200667,"line_start":180,"line_end":180,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200668,"byte_end":200671,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200672,"byte_end":200731,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200732,"byte_end":200796,"line_start":183,"line_end":183,"column_start":1,"column_end":65}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200797,"byte_end":200831,"line_start":184,"line_end":184,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200832,"byte_end":200835,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ For signed integers:","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200836,"byte_end":200860,"line_start":186,"line_end":186,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200861,"byte_end":200864,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200865,"byte_end":200896,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200897,"byte_end":200932,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200933,"byte_end":200969,"line_start":190,"line_end":190,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":200970,"byte_end":200987,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":201110,"byte_end":201118,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[{"value":"/ A trait for values which cannot be negative","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":201052,"byte_end":201099,"line_start":196,"line_end":196,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":496},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2165,"byte_end":2168,"line_start":67,"line_end":67,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[{"value":"/ The base trait for numeric types, covering `0` and `1` values,","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2022,"byte_end":2088,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"/ comparisons, basic numeric operations, and string conversion.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2089,"byte_end":2154,"line_start":66,"line_end":66,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2213,"byte_end":2228,"line_start":68,"line_end":68,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3357,"byte_end":3371,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":" Convert from a string and radix (typically `2..=36`).","sig":null,"attributes":[{"value":"/ Convert from a string and radix (typically `2..=36`).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2235,"byte_end":2292,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2297,"byte_end":2300,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2305,"byte_end":2319,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2324,"byte_end":2327,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2332,"byte_end":2343,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use num_traits::Num;","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2348,"byte_end":2372,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2377,"byte_end":2380,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"27\", 10);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2385,"byte_end":2441,"line_start":77,"line_end":77,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(result, Ok(27));","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2446,"byte_end":2477,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2482,"byte_end":2485,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"foo\", 10);","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2490,"byte_end":2547,"line_start":80,"line_end":80,"column_start":5,"column_end":62}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2552,"byte_end":2581,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2586,"byte_end":2593,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Supported radices","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2606,"byte_end":2629,"line_start":84,"line_end":84,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2634,"byte_end":2637,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ The exact range of supported radices is at the discretion of each type implementation. For","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2642,"byte_end":2736,"line_start":86,"line_end":86,"column_start":5,"column_end":99}},{"value":"/ primitive integers, this is implemented by the inherent `from_str_radix` methods in the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2741,"byte_end":2832,"line_start":87,"line_end":87,"column_start":5,"column_end":96}},{"value":"/ standard library, which **panic** if the radix is not in the range from 2 to 36. The","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2837,"byte_end":2925,"line_start":88,"line_end":88,"column_start":5,"column_end":93}},{"value":"/ implementation in this crate for primitive floats is similar.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2930,"byte_end":2995,"line_start":89,"line_end":89,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3000,"byte_end":3003,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For third-party types, it is suggested that implementations should follow suit and at least","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3008,"byte_end":3103,"line_start":91,"line_end":91,"column_start":5,"column_end":100}},{"value":"/ accept `2..=36` without panicking, but an `Err` may be returned for any unsupported radix.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3108,"byte_end":3202,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/ It's possible that a type might not even support the common radix 10, nor any, if string","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3207,"byte_end":3299,"line_start":93,"line_end":93,"column_start":5,"column_end":97}},{"value":"/ parsing doesn't make sense for that type.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3304,"byte_end":3349,"line_start":94,"line_end":94,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":499},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3593,"byte_end":3599,"line_start":101,"line_end":101,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[{"value":"/ The trait for types implementing basic numeric operations","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3438,"byte_end":3499,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3500,"byte_end":3503,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3504,"byte_end":3582,"line_start":100,"line_end":100,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":506},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4233,"byte_end":4239,"line_start":123,"line_end":123,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement numeric operations taking","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4026,"byte_end":4102,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ the second operand by reference.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4103,"byte_end":4139,"line_start":120,"line_end":120,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4140,"byte_end":4143,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4144,"byte_end":4222,"line_start":122,"line_end":122,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":511},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4558,"byte_end":4564,"line_start":130,"line_end":130,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[{"value":"/ The trait for references which implement numeric operations, taking the","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4337,"byte_end":4412,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/ second operand either by value or by reference.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4413,"byte_end":4464,"line_start":127,"line_end":127,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4465,"byte_end":4468,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4469,"byte_end":4547,"line_start":129,"line_end":129,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":518},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4897,"byte_end":4909,"line_start":136,"line_end":136,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[{"value":"/ The trait for types implementing numeric assignment operators (like `+=`).","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4725,"byte_end":4803,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4804,"byte_end":4807,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4808,"byte_end":4886,"line_start":135,"line_end":135,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":523},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5319,"byte_end":5328,"line_start":149,"line_end":149,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement assignment operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5153,"byte_end":5225,"line_start":146,"line_end":146,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5226,"byte_end":5229,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5230,"byte_end":5308,"line_start":148,"line_end":148,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":526},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5624,"byte_end":5636,"line_start":156,"line_end":156,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `NumAssign` types which also implement assignment operations","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5408,"byte_end":5486,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ taking the second operand by reference.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5487,"byte_end":5530,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5531,"byte_end":5534,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5535,"byte_end":5613,"line_start":155,"line_end":155,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4049},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6758,"byte_end":6763,"line_start":192,"line_end":192,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4051},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6769,"byte_end":6776,"line_start":193,"line_end":193,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4048},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6737,"byte_end":6751,"line_start":191,"line_end":191,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"pub enum FloatErrorKind { Empty, Invalid, }","parent":null,"children":[{"krate":0,"index":4049},{"krate":0,"index":4051}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4055},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6934,"byte_end":6949,"line_start":198,"line_end":198,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":4056}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4056},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6960,"byte_end":6964,"line_start":199,"line_end":199,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":4055},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15236,"byte_end":15241,"line_start":387,"line_end":387,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"pub fn clamp<T: PartialOrd>(T, T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"/ A value bounded by a minimum and a maximum","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":14969,"byte_end":15015,"line_start":379,"line_end":379,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15016,"byte_end":15019,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15020,"byte_end":15073,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15074,"byte_end":15130,"line_start":382,"line_end":382,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15131,"byte_end":15165,"line_start":383,"line_end":383,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15166,"byte_end":15169,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min <= max)`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15170,"byte_end":15218,"line_start":385,"line_end":385,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15219,"byte_end":15228,"line_start":386,"line_end":386,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15806,"byte_end":15815,"line_start":406,"line_end":406,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"pub fn clamp_min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"/ A value bounded by a minimum value","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15471,"byte_end":15509,"line_start":398,"line_end":398,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15510,"byte_end":15513,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15514,"byte_end":15567,"line_start":400,"line_end":400,"column_start":1,"column_end":54}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15568,"byte_end":15602,"line_start":401,"line_end":401,"column_start":1,"column_end":35}},{"value":"/  `clamp_min(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::min(std::f32::NAN, 1.0)`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15603,"byte_end":15702,"line_start":402,"line_end":402,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15703,"byte_end":15706,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min == min)`. (This occurs if `min` is `NAN`.)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15707,"byte_end":15788,"line_start":404,"line_end":404,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15789,"byte_end":15798,"line_start":405,"line_end":405,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16317,"byte_end":16326,"line_start":423,"line_end":423,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"pub fn clamp_max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"/ A value bounded by a maximum value","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":15979,"byte_end":16017,"line_start":415,"line_end":415,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16018,"byte_end":16021,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16022,"byte_end":16078,"line_start":417,"line_end":417,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16079,"byte_end":16113,"line_start":418,"line_end":418,"column_start":1,"column_end":35}},{"value":"/  `clamp_max(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::max(std::f32::NAN, 1.0)`.","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16114,"byte_end":16213,"line_start":419,"line_end":419,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16214,"byte_end":16217,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(max == max)`. (This occurs if `max` is `NAN`.)","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16218,"byte_end":16299,"line_start":421,"line_end":421,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":16300,"byte_end":16309,"line_start":422,"line_end":422,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":22587,"byte_end":22595,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":45854,"byte_end":45862,"line_start":619,"line_end":619,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":46630,"byte_end":46638,"line_start":652,"line_end":652,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49185,"byte_end":49193,"line_start":738,"line_end":738,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115888,"byte_end":115896,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117873,"byte_end":117881,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163360,"byte_end":163368,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163560,"byte_end":163568,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163760,"byte_end":163768,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163960,"byte_end":163968,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":164146,"byte_end":164154,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":164352,"byte_end":164360,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":746,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":197992,"byte_end":198000,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":755,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":201380,"byte_end":201388,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":756,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3836,"byte_end":3837,"line_start":110,"line_end":110,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":757,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4294,"byte_end":4295,"line_start":124,"line_end":124,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":758,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4658,"byte_end":4659,"line_start":131,"line_end":131,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":759,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5050,"byte_end":5051,"line_start":141,"line_end":141,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":760,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5374,"byte_end":5375,"line_start":150,"line_end":150,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":761,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5709,"byte_end":5710,"line_start":157,"line_end":157,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":774,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6309,"byte_end":6317,"line_start":176,"line_end":176,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":775,"kind":"Direct","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":7007,"byte_end":7022,"line_start":202,"line_end":202,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1897,"byte_end":1903,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1913,"byte_end":1917,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1927,"byte_end":1932,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":185}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1942,"byte_end":1952,"line_start":58,"line_end":58,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":246}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1962,"byte_end":1965,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":274}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1975,"byte_end":1978,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":306}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130216,"byte_end":130223,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":307}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130233,"byte_end":130236,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":335}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130246,"byte_end":130253,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":353}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130263,"byte_end":130274,"line_start":4,"line_end":4,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":365}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130284,"byte_end":130294,"line_start":5,"line_end":5,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":392}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/mod.rs","byte_start":130304,"byte_end":130312,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":408}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":1988,"byte_end":1991,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":450}},{"kind":"Mod","span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2015,"byte_end":2019,"line_start":63,"line_end":63,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":466}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/bounds.rs","byte_start":22587,"byte_end":22595,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":90}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":38800,"byte_end":38805,"line_start":411,"line_end":411,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":45854,"byte_end":45862,"line_start":619,"line_end":619,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":122}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":46630,"byte_end":46638,"line_start":652,"line_end":652,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47473,"byte_end":47478,"line_start":691,"line_end":691,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":47481,"byte_end":47492,"line_start":691,"line_end":691,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":122},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":49185,"byte_end":49193,"line_start":738,"line_end":738,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/cast.rs","byte_start":50200,"byte_end":50204,"line_start":770,"line_end":770,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2155},"to":{"krate":0,"index":181}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52044,"byte_end":52047,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52050,"byte_end":52057,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":173},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52060,"byte_end":52063,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2237},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52081,"byte_end":52091,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1905},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/float.rs","byte_start":52094,"byte_end":52098,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":2155},"to":{"krate":0,"index":198}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114631,"byte_end":114636,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":251}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":114639,"byte_end":114642,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":251}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":115888,"byte_end":115896,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":251}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116325,"byte_end":116330,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":116333,"byte_end":116336,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/identities.rs","byte_start":117873,"byte_end":117881,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120888,"byte_end":120893,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120900,"byte_end":120904,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2155},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120911,"byte_end":120914,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120921,"byte_end":120928,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":173},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120935,"byte_end":120942,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":90},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120949,"byte_end":120959,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1905},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120966,"byte_end":120969,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1894},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120976,"byte_end":120978,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":1867},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":120985,"byte_end":120988,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2262},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121010,"byte_end":121016,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2266},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121038,"byte_end":121043,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2271},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121065,"byte_end":121071,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2276},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121093,"byte_end":121096,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2281},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121125,"byte_end":121128,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2287},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121157,"byte_end":121167,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":316},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121189,"byte_end":121199,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":319},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121221,"byte_end":121231,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":321},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121253,"byte_end":121263,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":323},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/int.rs","byte_start":121285,"byte_end":121295,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":397},"to":{"krate":0,"index":288}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130476,"byte_end":130481,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":316}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":130484,"byte_end":130487,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":316}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131617,"byte_end":131622,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":319}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":131625,"byte_end":131628,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2215},"to":{"krate":0,"index":319}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132520,"byte_end":132525,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":321}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":132528,"byte_end":132531,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":321}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133488,"byte_end":133493,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":133496,"byte_end":133499,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2225},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134475,"byte_end":134480,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":325}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":134483,"byte_end":134486,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2231},"to":{"krate":0,"index":325}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":136254,"byte_end":136259,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":328}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137703,"byte_end":137708,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":330}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":137711,"byte_end":137714,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2281},"to":{"krate":0,"index":330}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139345,"byte_end":139350,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":333}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/checked.rs","byte_start":139353,"byte_end":139356,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2287},"to":{"krate":0,"index":333}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":145953,"byte_end":145958,"line_start":19,"line_end":19,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":386}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":145961,"byte_end":145964,"line_start":19,"line_end":19,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":386}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147040,"byte_end":147045,"line_start":42,"line_end":42,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":388}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":147048,"byte_end":147051,"line_start":42,"line_end":42,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2215},"to":{"krate":0,"index":388}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148136,"byte_end":148141,"line_start":65,"line_end":65,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":390}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/overflowing.rs","byte_start":148144,"byte_end":148147,"line_start":65,"line_end":65,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":390}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151321,"byte_end":151326,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":402}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":151329,"byte_end":151332,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":402}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152329,"byte_end":152334,"line_start":70,"line_end":70,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":152337,"byte_end":152340,"line_start":70,"line_end":70,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2215},"to":{"krate":0,"index":404}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153343,"byte_end":153348,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/saturating.rs","byte_start":153351,"byte_end":153354,"line_start":93,"line_end":93,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155749,"byte_end":155754,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":418}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":155757,"byte_end":155760,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":418}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156643,"byte_end":156648,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":420}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":156651,"byte_end":156654,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2215},"to":{"krate":0,"index":420}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157543,"byte_end":157548,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":422}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":157551,"byte_end":157554,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":422}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":158683,"byte_end":158688,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160522,"byte_end":160527,"line_start":152,"line_end":152,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":428}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":160530,"byte_end":160533,"line_start":152,"line_end":152,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2281},"to":{"krate":0,"index":428}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161928,"byte_end":161933,"line_start":187,"line_end":187,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":430}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":161936,"byte_end":161939,"line_start":187,"line_end":187,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2287},"to":{"krate":0,"index":430}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163360,"byte_end":163368,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"kind":{"Impl":{"id":590}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":418}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163560,"byte_end":163568,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"kind":{"Impl":{"id":591}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":420}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163760,"byte_end":163768,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"kind":{"Impl":{"id":592}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":422}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":163960,"byte_end":163968,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"kind":{"Impl":{"id":593}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":425}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":164146,"byte_end":164154,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"kind":{"Impl":{"id":594}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":428}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/ops/wrapping.rs","byte_start":164352,"byte_end":164360,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"kind":{"Impl":{"id":595}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":430}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195904,"byte_end":195909,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2150},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195912,"byte_end":195915,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":195918,"byte_end":195921,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2237},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":197992,"byte_end":198000,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":746}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":471}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":201120,"byte_end":201123,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":492}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/sign.rs","byte_start":201380,"byte_end":201388,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":755}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":492}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2170,"byte_end":2179,"line_start":67,"line_end":67,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1862},"to":{"krate":0,"index":496}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2182,"byte_end":2186,"line_start":67,"line_end":67,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":496}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2189,"byte_end":2192,"line_start":67,"line_end":67,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":261},"to":{"krate":0,"index":496}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":2195,"byte_end":2201,"line_start":67,"line_end":67,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":499},"to":{"krate":0,"index":496}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3632,"byte_end":3635,"line_start":102,"line_end":102,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2210},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3664,"byte_end":3667,"line_start":103,"line_end":103,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2215},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3696,"byte_end":3699,"line_start":104,"line_end":104,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2220},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3728,"byte_end":3731,"line_start":105,"line_end":105,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2225},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3760,"byte_end":3763,"line_start":106,"line_end":106,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2231},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":3836,"byte_end":3837,"line_start":110,"line_end":110,"column_start":46,"column_end":47},"kind":{"Impl":{"id":756}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4241,"byte_end":4244,"line_start":123,"line_end":123,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":506}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4255,"byte_end":4261,"line_start":123,"line_end":123,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":499},"to":{"krate":0,"index":506}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4294,"byte_end":4295,"line_start":124,"line_end":124,"column_start":20,"column_end":21},"kind":{"Impl":{"id":757}},"from":{"krate":0,"index":509},"to":{"krate":0,"index":506}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4572,"byte_end":4578,"line_start":130,"line_end":130,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":499},"to":{"krate":0,"index":511}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4601,"byte_end":4607,"line_start":130,"line_end":130,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":499},"to":{"krate":0,"index":511}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4658,"byte_end":4659,"line_start":131,"line_end":131,"column_start":32,"column_end":33},"kind":{"Impl":{"id":758}},"from":{"krate":0,"index":515},"to":{"krate":0,"index":511}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4927,"byte_end":4936,"line_start":137,"line_end":137,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2241},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4944,"byte_end":4953,"line_start":137,"line_end":137,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2245},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4961,"byte_end":4970,"line_start":137,"line_end":137,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2249},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4978,"byte_end":4987,"line_start":137,"line_end":137,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":2253},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":4995,"byte_end":5004,"line_start":137,"line_end":137,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":2257},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5050,"byte_end":5051,"line_start":141,"line_end":141,"column_start":36,"column_end":37},"kind":{"Impl":{"id":759}},"from":{"krate":0,"index":521},"to":{"krate":0,"index":518}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5330,"byte_end":5333,"line_start":149,"line_end":149,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":496},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5336,"byte_end":5348,"line_start":149,"line_end":149,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":518},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5374,"byte_end":5375,"line_start":150,"line_end":150,"column_start":23,"column_end":24},"kind":{"Impl":{"id":760}},"from":{"krate":0,"index":525},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5638,"byte_end":5647,"line_start":156,"line_end":156,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":523},"to":{"krate":0,"index":526}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5658,"byte_end":5670,"line_start":156,"line_end":156,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":518},"to":{"krate":0,"index":526}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":5709,"byte_end":5710,"line_start":157,"line_end":157,"column_start":26,"column_end":27},"kind":{"Impl":{"id":761}},"from":{"krate":0,"index":529},"to":{"krate":0,"index":526}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":6309,"byte_end":6317,"line_start":176,"line_end":176,"column_start":22,"column_end":30},"kind":{"Impl":{"id":774}},"from":{"krate":1,"index":16598},"to":{"krate":0,"index":496}},{"span":{"file_name":"/home/mla/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.14/src/lib.rs","byte_start":7007,"byte_end":7022,"line_start":202,"line_end":202,"column_start":23,"column_end":38},"kind":{"Impl":{"id":775}},"from":{"krate":0,"index":4055},"to":{"krate":1,"index":7025}}]}